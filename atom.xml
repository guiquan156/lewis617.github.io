<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lewis617的个人博客</title>
  <subtitle>何以升华，唯有沉淀</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lewis617.github.io/"/>
  <updated>2016-12-19T12:59:38.807Z</updated>
  <id>https://lewis617.github.io/</id>
  
  <author>
    <name>Lewis617</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RxJS + Redux + React = Amazing!（译二）</title>
    <link href="https://lewis617.github.io/2016/12/09/rxjs-redux-react-amazing-2/"/>
    <id>https://lewis617.github.io/2016/12/09/rxjs-redux-react-amazing-2/</id>
    <published>2016-12-09T03:32:00.000Z</published>
    <updated>2016-12-19T12:59:38.807Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我将Youtube上的《RxJS + Redux + React = Amazing!》的后半部分翻译（+机译）了下来，以供国内的同学学习，英文听力好的同学可以直接看原版视频：</p>
<p><a href="https://www.youtube.com/watch?v=AslncyG8whg" target="_blank" rel="external">https://www.youtube.com/watch?v=AslncyG8whg</a></p>
<a id="more"></a>
<h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h2><p>什么是Observable？让我们快速来了解一下它吧！</p>
<ul>
<li><strong>Observable是一个由零个、一个或多个值组成的流。</strong>注意，是零个、一个或多个值。零个意味着可以没有值，这完全没问题。一个值的情况就像是Promise一样。如果有多个值，那么这些值将位于不同的时间点上。</li>
<li><strong>Observable跨越了时间。</strong>时间是一种新的维度，这个维度是Observable与Promise的重要不同点。所有“流式”的事物都会跨越时间。事实上，<strong>流就是一个以时间为维度的集合</strong>。</li>
<li><strong>Observable可以取消。</strong></li>
</ul>
<p>很酷的是，Observable正在变为ECMAScript的标准，就像Promise那样，但现在你还不能直接在浏览器里使用它（原话很啰嗦，直接提取有用信息）。所以你需要使用RxJS。</p>
<p><img src="https://ws1.sinaimg.cn/large/83900b4ejw1fakfuc1t28j20dw08pq41.jpg" alt=""></p>
<p>RxJS是Observable的一种引用实现，它提供了一些定制的功能，比如操作符（Operators）、创建不同类型Observable的工厂方法。我同事说，RxJS就像是</p>
<blockquote>
<p>lodash for async</p>
</blockquote>
<p>因为它和lodash一样也是个工具库。lodash的用法基本上就是，你给它一个输入，它给你一个输出。RxJS的用法则是，你给它一个输入，它给你一个输出，但是<strong>跨越了时间</strong>。所以，你可以拥有多个值。让我们通过一个速成教程来更深入的了解它吧！</p>
<ol>
<li><p>创建Observable有很多种方式（直接贴截图）：</p>
<p> <img src="https://ws4.sinaimg.cn/large/83900b4ejw1fakgfw4kdrj20dw080wfo.jpg" alt=""></p>
<p> 你可以：</p>
<ul>
<li>创建一个单值的Observable</li>
<li>从数组（或其他类型）创建一个Observable</li>
<li>设置时间间隔</li>
<li>发起Ajax或WebSockets</li>
<li>还有很多方法可以创建定制的Observable</li>
</ul>
</li>
<li><p>Observable可以被订阅（Subscribing）：</p>
<p> <img src="https://ws1.sinaimg.cn/large/83900b4ejw1fakhztxxnfj20dw07ygmj.jpg" alt=""></p>
<p> Observable的订阅和Promise的then挺像的。你可以给它提供三个函数：</p>
<ul>
<li><strong>第一个函数是next函数</strong>，它有点像Promise的成功情况下的回调函数，但是，因为Observable是<strong>跨时间的</strong>，它可能有零或多个值，所以next函数可能会被调用N次，或许会被调用上千次，或许一次都没被调用，这取决于Observable有多少值。</li>
<li><strong>第二个是error函数</strong></li>
<li><strong>第三个是complete函数</strong>，有时候或许我们想知道是否完成了，此时，该函数就派上用场了。</li>
</ul>
</li>
<li><p>我们还可以对Observable进行转换（Transform）。就像之前讨论的，我们可以像使用lodash那样，对Observable进行map、filter、reduce。如果Observable只有单值，我们不会做这些操作。我们只会对<strong>流或流式的处理</strong>进行这些操作，比如，一些数据来了，我们把它们映射（map）成另外一些数据。这个方式非常高效（用了声明式的写法，不用像指令式那样写过程，当然高效了）！</p>
</li>
<li><p>Observable还可以被合并（Combine）：concat、merge、zip。</p>
</li>
<li><p>Observable还可以表达时间（Represent Time，意思是可以进行与时间相关的操作）。因为Observable是以时间作为维度的，所以你<strong>绝对绝对</strong>可以做debounce、throttle、buffer这些操作（他说到这，有点自嗨了，注：debounce、throttle都是去除速率过快的事件、buffer则是周期性的合并一些项，然后一起触发它们）。</p>
</li>
<li><p>Observable还有个优点，就是懒（lazy）：你定义了一个Observable应该做什么，它不会做任何事情，直到你订阅它。因此，你可以轻易实现重试或重复（retry、repeat，有相关的操作符，可以自行查询），比如在错误时重试或重复发起一个Ajax请求五次。</p>
</li>
</ol>
<p>（讲完上述几条后，他总结了一句话：<strong>Observables can represent just about anything</strong>，但接下来又非常辩证地说了也不要什么都用RxJS，因为RxJS太新了什么的，不再赘述。）</p>
<h2 id="RxJS和Redux的结合——redux-observable"><a href="#RxJS和Redux的结合——redux-observable" class="headerlink" title="RxJS和Redux的结合——redux-observable"></a>RxJS和Redux的结合——redux-observable</h2><p>我们非常喜欢RxJS，也非常喜欢Redux，所以我们想，把这两个技术结合一下吧！我们实验了几种模式，经过了一些迭代，最后有了一个稳定的解决方案。如果你之前开源过什么东西，那么你一定知道，最重要的事情是——先做个好logo。不是写测试，不是保证它正常工作，也不是写文档，而是要先做个logo，这是最重要的事情，关乎你能拿多少star（场下有人笑了，然后他讲了他们logo的来历，大概就是，本来想结合RxJS的logo和Redux的logo，但是Redux当时还没有logo，他们就用Redux的谐音“three ducks”，三只鸭子做为logo，在经历了压扁、合并以及添加旋转动画后，终于得到了他们满意的logo，也就是现在redux-observable的logo）。</p>
<p><img src="https://ws1.sinaimg.cn/large/83900b4ejw1faknp217eaj20dw0an74v.jpg" alt=""></p>
<p>redux-observable是一个Redux中间件，用来管理副作用，包括异步。我们使用一个叫Epic的概念去完成这个工作。那么什么是Epic？</p>
<blockquote>
<p>A function that takes a stream of <strong>all actions</strong> dispatched and returns a stream of <strong>new actions</strong> to dispatch<br>Epic是一个函数，该函数将<strong>所有被发起的流式的action</strong>作为参数，然后返回<strong>新的流式的action</strong>去发起。</p>
</blockquote>
<p>简单来说，Epic就是：</p>
<blockquote>
<p>“action in, action out”</p>
</blockquote>
<p>（然后他用了一些伪代码去演示Epic的工作原理，注意，阅读下面的内容需要一点Redux和RxJS基础，如果感到吃力，应该先去看下Redux和RxJS。）</p>
<ol>
<li><p>这是一个简单的函数，输入PING，立马得到PONG：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pingPong</span>(<span class="params">action, store</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(action.type === <span class="string">'PING'</span>)&#123;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">'PONG'</span>&#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果使用RxJS的操作符来实现它，会更加声明式： </p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pingPongEpic</span>(<span class="params">action$, store</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> action$.ofType(<span class="string">'PING'</span>)</div><div class="line">     .map(<span class="function"><span class="params">action</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">'PONG'</span>&#125;));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这就是世界上最简单的Epic，它的第一个参数是个流式的action。首先，这个Epic函数对流式的action进行了类型过滤，然后将其映射为新的流式的action。这就像个管道一样，所有action都会进来，然后进行匹配并输出。</p>
<ol>
<li><p>如果想等待一秒后，就像打乒乓球那样，“乒-乓-乒-乓”，只需要加一行代码：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pingPongEpic</span>(<span class="params">action$, store</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> action$.ofType(<span class="string">'PING'</span>)</div><div class="line">     .delay(<span class="number">1000</span>) <span class="comment">// &lt;- that's it</span></div><div class="line">     .map(<span class="function"><span class="params">action</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">'PONG'</span>&#125;));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 此时，如果你的reducer的逻辑是，PING是true，PONG是false，那么你的应用会是这样（他指着屏幕的动图，大概功能就是点击按钮，isPING的值等待了一秒后变为false）。</p>
</li>
<li><p>让我们来看另外一个debounce例子吧（代码和程序截图如下，这是个计数器的例子，大概就是添加了debounce后，连续点击加一或减一，速率过快的操作将会被取消）！</p>
<p> <img src="https://ws2.sinaimg.cn/large/83900b4ejw1fakp4thjkxj20dw07yt9n.jpg" alt=""></p>
</li>
</ol>
<p>上述示例都太简单了，让我们看几个复杂的例子，这些例子不会讲解代码的细节，只是用来证明<strong>RxJS和redux-observable在复杂场景中有多么地牛！</strong></p>
<ul>
<li>自动补全（他先是演示了使用普通JavaScript的写法，代码特别长，过程特别繁琐，然后演示了使用Epic的写法，只用了debounce、switchMap和map三个操作符，代码特别短，而且非常声明式和易读）</li>
<li>双向多重的WebSockets（他还是先演示使用普通JavaScript代码的写法，代码特别多，而且容易引入bug。然后他演示了Epic的写法，功能一样不少，但是代码特别少而且非常声明式）</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/83900b4ejw1faku828ck7j20dw08p75i.jpg" alt=""></p>
<p>让我们来快速总结下redux-observable吧：</p>
<ul>
<li>让跨时间的复杂异步任务的组合和控制变得简单，当然如果只是做请求-响应这种简单的Ajax，那么学习RxJS是多余的。</li>
<li>你不需要管理Rx的订阅，因为redux-observable帮你做了这些。</li>
<li>你依然可以享受Redux的功能，比如时间旅行等。</li>
</ul>
<p>但是在你尝试使用redux-observable之前，<strong>你应该提前学习Redux和RxJS</strong>。当然，这应该是业余时间做的事，或是在你特别想挑战自己的情况下才要做的事。我不是打击大家的积极性，只是不想让在座的各位产生一个错误观念，就是即便我的应用很小很简单，我仍然应该使用redux-observable。 但是，如果你觉得我今天描述的问题，也正好是你的问题，那么你一定愿意学习RxJS、Redux和redux-observable。 </p>
<p><img src="https://ws2.sinaimg.cn/large/83900b4ejw1faku9kr2h5j20dw08pab6.jpg" alt=""></p>
<p>另外，RxJS拥有非常陡峭的学习曲线。 最近有个新流行词叫响应式编程（Reactive Programing ），RxJS做的就是这个。响应式编程是个令人发狂的编程范式，不过你可以这么理解它：就像是你先安装好管道，但还没有水流过管道，等到将来某个人发起了一个action，然后潺潺流水就来了，你的管道就开始运作了。（他之所以用流水这个比喻，主要是为了突出响应式编程，自动响应和变化传播的特性，如果你还不能理解，可以参考<a href="https://zh.wikipedia.org/wiki/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B" target="_blank" rel="external">维基百科</a>）。响应式编程是一种完全不同的编程风格。</p>
<p>（然后他介绍了他的联合作者，展示了redux-observable的官网以及目前有哪些公司在用，最后致谢。）</p>
<p><img src="https://ws2.sinaimg.cn/large/83900b4ejw1fakubrwyb6j20dw08pdgx.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Jay Phelps的这个talk还是很不错的，而且比较客观。从这个talk中，我们可以学习到：</p>
<ul>
<li>Redux是什么，以及它是如何工作的。</li>
<li>Observable是什么，以及它的基本用法。</li>
<li>redux-observable的工作原理以及适用场景。</li>
<li>在复杂的异步场景下，回调和Promise捉襟见肘，而Observable则应对自如。</li>
<li>在简单的异步场景下，没必要使用Observable。</li>
</ul>
<hr>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/react-redux-tutorial" target="_blank" rel="external">https://github.com/lewis617/react-redux-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我将Youtube上的《RxJS + Redux + React = Amazing!》的后半部分翻译（+机译）了下来，以供国内的同学学习，英文听力好的同学可以直接看原版视频：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AslncyG8whg&quot;&gt;https://www.youtube.com/watch?v=AslncyG8whg&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://lewis617.github.io/tags/React/"/>
    
      <category term="Redux" scheme="https://lewis617.github.io/tags/Redux/"/>
    
      <category term="RxJS" scheme="https://lewis617.github.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title>RxJS + Redux + React = Amazing!（译一）</title>
    <link href="https://lewis617.github.io/2016/12/08/rxjs-redux-react-amazing-1/"/>
    <id>https://lewis617.github.io/2016/12/08/rxjs-redux-react-amazing-1/</id>
    <published>2016-12-08T02:37:00.000Z</published>
    <updated>2016-12-19T12:59:38.807Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我将Youtube上的《RxJS + Redux + React = Amazing!》翻译（+机译）了下来，以供国内的同学学习，英文听力好的同学可以直接看原版视频：</p>
<p><a href="https://www.youtube.com/watch?v=AslncyG8whg" target="_blank" rel="external">https://www.youtube.com/watch?v=AslncyG8whg</a></p>
<a id="more"></a>
<h2 id="开场白"><a href="#开场白" class="headerlink" title="开场白"></a>开场白</h2><p>管理状态很困难，对吧？如果你写过复杂应用，你一定对此深恶痛绝。React社区还有Angular2社区和Ember社区现在都开始使用一个库，叫Redux。为什么？因为它让管理状态变得简单多了。但Redux有个问题，就是它对你写异步代码没什么帮助，因为Redux认为异步是个比管理状态更难的问题。特别是当你试图去解决一些复杂问题，比如：并行或多重WebSockets。这些问题本身就很复杂，你也没辙。所以，这次演说将会介绍使用另一个库，叫RxJS。这个库至少可以让异步问题变得可控可管理，至少可以让你知道发生了什么。</p>
<p><img src="https://ws2.sinaimg.cn/large/83900b4egw1fajfdn4115j20dw08pabg.jpg" alt=""></p>
<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>我是谁？我是Jay Phelps。很明显，照片中的衬衫不是我今天穿的，尽管它们很像，（歪果仁就是啰嗦，不过场下听众听到这都乐了）。其实我穿了另外一件蓝色衬衫，但这是我的推特头像，它可以帮助那些还没有认出我的人认出我来。很明显，我是Netflix的软件工程师。你可以关注我，通过下划线jayphelps（就是_jayphelps，然后他又扯了一些没用的，说有另外一个jayphelps，是一个16岁的家伙，经常转推一些足球图片。他说他经常说这个梗，因为很多本来要关注他的人，都去关注那个16岁足球小哥了）。</p>
<p><img src="https://ws2.sinaimg.cn/large/83900b4egw1fajfagmj60j20dw08pgmo.jpg" alt=""></p>
<h2 id="什么是Redux"><a href="#什么是Redux" class="headerlink" title="什么是Redux"></a>什么是Redux</h2><p>让我们开始讨论什么是Redux。这个演说不会详细介绍Redux和RxJS，因为它们本身就有非常多相关的演说，但我会给你们一个速成教程。这样，即便你不知道它们具体是什么，至少可以了解个大概。Redux提供了一个可预测的状态管理，它通过action和reducer来完成这个工作。那么什么是action？action被用来描述发生的事，但它不关心如何这件事如何发生。让我们来看个例子吧！</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">"CREATE_TODO"</span>,</div><div class="line">  <span class="attr">payload</span>: <span class="string">"Build my first redux app"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是个简单的action，通过这个action，你知道了你要去创建一个todo，这个todo的内容是什么，但它没说如何去创建这个todo，它没说是是否要与服务器交互，也没说是否要存到数据库或localstorage中，它没有进行异步操作，它是个完全可以被序列化的对象。那么什么是reducer？reducer是一些纯函数，这意味着每次你给了一样的输入，那么就会有一样的输出，没有副作用。reducer的具体功能是输入上个的state和action，然后输出新的state，当然新的state可以和上个state完全一样（就是case为default的情况）。举个非真实场景的例子吧，这是个计数器的例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> INCREMENT_COUNTER:</div><div class="line">      <span class="keyword">return</span> state + <span class="number">1</span></div><div class="line">    <span class="keyword">case</span> DECREMENT_COUNTER:</div><div class="line">      <span class="keyword">return</span> state - <span class="number">1</span></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们仅仅就是选择action类型，当action是加一，state就加一，action是减一，state就减一，就是这么字面性质的工作。reducer负责state更新，但它必须是同步的。这意味着，如果reducer收到加一的action，那么就必须立马加一。reducer不能去除速率过快的事件（debounce），也不能和服务器交互，也不能问“我是否可以加一“。reducer只能受到action，然后立马同步执行。</p>
<p><img src="https://ws1.sinaimg.cn/large/83900b4egw1fajm1o61ufj20dw08pwfk.jpg" alt=""></p>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>我们平时都做些什么类型的异步操作呢？（竟然没有衔接，直接从Redux转折到异步）为何说异步是个难缠的问题呢？常见的异步事件操作包括：</p>
<ul>
<li>用户交互（键盘、鼠标）</li>
<li>Ajax（这就像面包和黄油一样熟悉，我们每个人都会做Ajax请求）</li>
<li>计时器／动画</li>
<li>Web Sockets </li>
<li>Web Workers</li>
</ul>
<p>这不是个详细的列表。上述其中一些可以同步处理，尽管它们本身是异步的。React与Redux已经封装好了，你可以直接同步处理它们！（然后，他举了一个例子，React组件的点击事件，可以触发加一的action，然后reducer处理这个action）从技术角度上来说，这些事件是异步的，但你可以用同步的方式来处理它。为什么？因为React已经帮你处理了异步。但是，问题来了，如果你还想要点击，如果你想去除速率过快的事件，比如，用户点了很多次，而你不想每次都进行事件处理。这时，你通常会计算点击间隔，然后只处理间隔较大的点击事件。有时候，你需要像这样的更多的控制。这些控制包括：</p>
<ul>
<li>Ajax取消／组合（组合的意思是，比如你发起了一个Ajax，然后你又发起了另外一个Ajax，后一个的发起用到了前一个的响应数据）</li>
<li>Debounce／throttle／buffer等这些与时间相关的操作</li>
<li>Drag and Drop </li>
<li>Web Sockets, Web Workers, etc</li>
</ul>
<p>在Redux世界里，人们经常使用中间件来处理这些操作。所有action在你发起后，和到达reducer前，都必须穿过中间件。现在已经有很多中间件使用回调和Promise来做这些事了（指那些复杂的异步操作）。下面就让我们看看这两种最常用的异步处理方法吧！</p>
<p><img src="https://ws4.sinaimg.cn/large/83900b4egw1fajlzuj7r5j20dw08p75d.jpg" alt=""></p>
<h2 id="回调和Promise"><a href="#回调和Promise" class="headerlink" title="回调和Promise"></a>回调和Promise</h2><p>回调对大家来说非常熟悉，因为它是JavaScript最原始的处理异步的方式（然后他举了个回调的例子，回调太简单，不再赘述）。但是回调有很多问题，其中最常见的就是“回调地狱“。大家几乎都见过这种代码（他指着屏幕上的代码示例）。如果你想改变代码，比如做点这样的事：</p>
<ul>
<li>条件判断，然后决定是否进行下一个异步</li>
<li>你不想顺序执行这些异步</li>
<li>更加复杂的回调操作，比如你想并发它们等</li>
</ul>
<p>那么事情就变得非常复杂了，对吧？我的同事称回调地狱是“V型电吉他“，因为它们的形状非常相似。不过，有了一种解决方案，叫Promise。使用Promise有个绝招，那就是如果你给Promise提供了一个回调，这个回调也返回了一个Promise，那么你可以将其写为平行的风格（这算什么绝招啊，大多数人都知道吧！）。如果你理解了这种模式，那么Promise的代码将会变得非常易读。这很棒，它是个非常好的候选方案。让我们更深入的了解一下Promise吧！Promise拥有这些特性：</p>
<ul>
<li>被保证的未来（意思是，一旦你创建了一个Promise，那么它肯定会执行它要做的事情，你不能停止它，开始黑Promise了。）</li>
<li>不可变</li>
<li>单一的值（意思是，如果你监听一个Promise很多次，你只会得到相同的值，而不是执行多次请求 ）</li>
<li>缓存</li>
</ul>
<p>在真实项目中，你会发现“被保证的未来“和“单一的值“是个问题，先说“被保证的未来“吧，Promise是不能被取消的。或许你会问，我既然创建了一个Promise，为何要取消它？以下场景，你就要取消你的Promise，也就是异步请求：</p>
<ul>
<li>改变路由／视图（他举了Netflix的一个例子，大概就是点进一个页面，然后后悔了就返回了，这时需要取消请求）</li>
<li>自动补全（这个例子比较常见，自动补全总不能每次键盘按下都发请求吧？）</li>
<li>用户非要你取消</li>
</ul>
<p>可见，取消异步是一个非常常用，但是容易被忽略的需求。再说Promise的“单一的值“吧！（然后开始黑Promise的“单一的值“，不过他欲扬先抑了一下），其实绝大多数场景下，我们只需要单一的值，比如Ajax，请求-响应，就是单一的值。但人们不只想做这些事，像之前提到的：</p>
<ul>
<li>用户交互（键盘、鼠标）</li>
<li>Ajax（这就像面包和黄油一样熟悉，我们每个人都会做Ajax请求）</li>
<li>计时器／动画</li>
<li>Web Sockets </li>
<li>Web Workers</li>
</ul>
<p>上述场景也就Ajax是单一的值，其他几个场景都不是。那我们该怎么办呢？那就是使用Observable！</p>
<p><img src="https://ws4.sinaimg.cn/large/83900b4egw1fajm3lhmmoj20dw08pjsc.jpg" alt=""></p>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>这个视频太长了，今天就到此为止吧！在这篇文章中，我们主要听了Jay Phelps：</p>
<ul>
<li>讲了Redux和异步  </li>
<li>黑了回调和Promise</li>
</ul>
<p>下篇文章我们将听他：</p>
<ul>
<li>吹Observable的牛</li>
<li>讲述他和他搭档造redux-obserable这个轮子背后的故事！</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我将Youtube上的《RxJS + Redux + React = Amazing!》翻译（+机译）了下来，以供国内的同学学习，英文听力好的同学可以直接看原版视频：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AslncyG8whg&quot;&gt;https://www.youtube.com/watch?v=AslncyG8whg&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://lewis617.github.io/tags/React/"/>
    
      <category term="Redux" scheme="https://lewis617.github.io/tags/Redux/"/>
    
      <category term="RxJS" scheme="https://lewis617.github.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title>用更少的代码发起异步 action</title>
    <link href="https://lewis617.github.io/2016/11/30/redux-amrc/"/>
    <id>https://lewis617.github.io/2016/11/30/redux-amrc/</id>
    <published>2016-11-30T20:18:00.000Z</published>
    <updated>2016-12-19T12:59:38.807Z</updated>
    
    <content type="html"><![CDATA[<p>很多人说 Redux 代码多，开发效率低。其实 Redux 是可以灵活使用以及拓展的，经过充分定制的 Redux 其实写不了几行代码。今天先介绍一个很好用的 Redux 拓展—— <a href="https://github.com/lewis617/redux-amrc" target="_blank" rel="external">redux-amrc</a>。它可以帮助我们使用更少的样板代码发起异步 action。</p>
<a id="more"></a>
<h2 id="低效的过去"><a href="#低效的过去" class="headerlink" title="低效的过去"></a>低效的过去</h2><p>一般情况下，为了清楚地记录异步的过程，我们需要使用 三个 action 来记录状态变化。通常，我们的代码会是这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> LOAD = <span class="string">'redux-example/auth/LOAD'</span>;</div><div class="line"><span class="keyword">const</span> LOAD_SUCCESS = <span class="string">'redux-example/auth/LOAD_SUCCESS'</span>;</div><div class="line"><span class="keyword">const</span> LOAD_FAIL = <span class="string">'redux-example/auth/LOAD_FAIL'</span>;</div></pre></td></tr></table></figure>
<p>写完这么多 action，还要在异步的前后发起它们，当然这时你可能会用中间件，所以你的代码最少也会是这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">types</span>: [LOAD, LOAD_SUCCESS, LOAD_FAIL],</div><div class="line">    <span class="attr">promise</span>: <span class="function">(<span class="params">client</span>) =&gt;</span> client.get(<span class="string">'/loadAuth'</span>)</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发起 action 后，还要编写 reducer 来处理这些 action，以改变状态：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = initialState, action = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> LOAD:</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...state,</div><div class="line">        <span class="attr">loading</span>: <span class="literal">true</span></div><div class="line">      &#125;;</div><div class="line">    <span class="keyword">case</span> LOAD_SUCCESS:</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...state,</div><div class="line">        <span class="attr">loading</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">loaded</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">user</span>: action.result</div><div class="line">      &#125;;</div><div class="line">    <span class="keyword">case</span> LOAD_FAIL:</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...state,</div><div class="line">        <span class="attr">loading</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">loaded</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">error</span>: action.error</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这太痛苦了，不就是发起一个异步吗？非要让我写这么多代码？</p>
<p>其实，上述过程是可以简化的。记得有篇文章叫《超过90秒的任务不自动化，你好意思说自己是黑客？》，前端工程师也应该具有黑客精神，接下来就让我们使用 redux-amrc 将上述过程简化。</p>
<h2 id="轻松的现在"><a href="#轻松的现在" class="headerlink" title="轻松的现在"></a>轻松的现在</h2><p>使用了 redux-amrc 后，再也不用写这么多action了，甚至连处理这些action的reducer 都不用写，你只需要把异步以 Promise 的形式传给 redux-amrc 就行了：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ASYNC &#125; <span class="keyword">from</span> <span class="string">'redux-amrc'</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 这个action创建函数可以帮你自动发起 LOAD 和 LOAD_SUCCESS,</div><div class="line"> * state.async.[key] 将会变为 'success'</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    [ASYNC]: &#123;</div><div class="line">      <span class="attr">key</span>: <span class="string">'key'</span>,</div><div class="line">      <span class="attr">promise</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(<span class="string">'success'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 这个action创建函数可以帮你自动发起 LOAD 和 LOAD_FAIL,</div><div class="line"> * state.async.loadState.[key].error 将会变为 'fail'</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    [ASYNC]: &#123;</div><div class="line">      <span class="attr">key</span>: <span class="string">'key'</span>,</div><div class="line">      <span class="attr">promise</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.reject(<span class="string">'fail'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>没有 action，没有 reducer，就是这么清爽！当然，在享受这一切之前，你需要进行简单的配置。更详细的用法，请参考 redux-amrc 的<a href="https://lewis617.github.io/redux-amrc/">官网文档</a>。</p>
<p>另外，附一张使用 redux-amrc 的程序截图，那些 LOAD、LOAD_SUCCESS、LOAD_FAIL 就是 redux-amrc 帮你自动生成的！</p>
<p><img src="http://ww1.sinaimg.cn/large/83900b4egw1fabfc1z4kwj210s0nsaem.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人说 Redux 代码多，开发效率低。其实 Redux 是可以灵活使用以及拓展的，经过充分定制的 Redux 其实写不了几行代码。今天先介绍一个很好用的 Redux 拓展—— &lt;a href=&quot;https://github.com/lewis617/redux-amrc&quot;&gt;redux-amrc&lt;/a&gt;。它可以帮助我们使用更少的样板代码发起异步 action。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redux" scheme="https://lewis617.github.io/tags/Redux/"/>
    
      <category term="redux-amrc" scheme="https://lewis617.github.io/tags/redux-amrc/"/>
    
  </entry>
  
  <entry>
    <title>React 与 Redux 在生产环境中的实践总结</title>
    <link href="https://lewis617.github.io/2016/11/26/opendata/"/>
    <id>https://lewis617.github.io/2016/11/26/opendata/</id>
    <published>2016-11-26T06:36:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间使用 React 与 Redux 重构了我们360网络安全研究院的 <a href="http://data.netlab.360.com/" target="_blank" rel="external">开放数据平台</a>。现将其中一些技术实践经验总结如下：</p>
<a id="more"></a>
<h2 id="Universal-渲染"><a href="#Universal-渲染" class="headerlink" title="Universal 渲染"></a>Universal 渲染</h2><p>Universal （“同构”现在是公认的不准确的叫法）渲染是指在服务端与客户端使用一套代码进行渲染的技术。它所带来的优势如下：</p>
<ol>
<li>与实现服务端渲染的传统应用相比，Universal 渲染中的客户端渲染减少了网络请求（主要是模板和静态资源的请求），提高了页面间切换的速度，可以看到页面之间的切换都是瞬间完成的。</li>
<li>与实现客户端渲染的传统 SPA（比如 Angular1.x 搭建的单页面应用）相比，Universal 渲染的服务端渲染提升了首屏加载速度，无须等待庞大的 Javascript 脚本加载完成后进行渲染，因此也无须使用欢迎界面了。</li>
<li>与使用不同语言实现服务端渲染＋客户端渲染的应用（指的是后端语言为 Java、Python、PHP、前端语言为 JavaScript 的应用）相比，由于 Universal 渲染使用同一套代码（前后端均为 JavaScript），因此至少减少了一半的代码量。</li>
</ol>
<p>Universal 渲染非常复杂，需要权衡的东西很多。不过这都是值得的，真正让网站达到了快如鬼魅的速度！顺便引用一句话：</p>
<blockquote>
<p> According to research at Google, the difference of just 200 milliseconds in page load performance has an impact on user behavior. </p>
<p>根据 Google 的调查，在一个页面的加载过程中，仅仅200毫秒的差异就可以影响用户的行为。</p>
</blockquote>
<p>另外，Universal 也能保证 SEO，毕竟搜索引擎无法和 JavaScript 通信。</p>
<h2 id="延迟渲染"><a href="#延迟渲染" class="headerlink" title="延迟渲染"></a>延迟渲染</h2><p>很多人抱怨 React 并没有大家说的那么快，其实 React 只是便于优化性能，在没有经验的新手手中，React确实可能会很慢。但如果你对 React 非常了解，那么快如鬼魅便不是虚言。React 性能优化的方法很多，网上也有无数的文章对其进行介绍（选择 React 的另一好处：活跃的社区），常见的方法主要是，使用不可变数据，快速进行变更检查，以避免不必要的重新渲染。但我们还要介绍一种方法——延迟渲染。</p>
<p>延迟渲染类似于分页或瀑布流，就是在一个有大量数据页面中，先渲染一部分，等用户滚动下去后，再进行渲染。</p>
<p>延迟渲染除了可以提升性能之外，还可以过滤掉不需要在服务端渲染的代码（服务端可没有re-render），以减少 Universal 的难度。</p>
<p>延迟渲染的方法很多，实现的轮子也很多，不再赘述了。</p>
<h2 id="减小重量"><a href="#减小重量" class="headerlink" title="减小重量"></a>减小重量</h2><p>在 React 与 Redux 的项目中，不可避免要引入一些第三方的库，因此最终打包的脚本重量很容易达到 500-800kb 以上（gzip 压缩前）。尽管首屏渲染速度不会受此影响（因为我们实现了 Universal 渲染中的服务端渲染，而浏览器又是自上而下解析的），但我们依然希望这个脚本的重量能够更小。现将一些可行的办法列举如下：</p>
<h3 id="改变库的调用方式"><a href="#改变库的调用方式" class="headerlink" title="改变库的调用方式"></a>改变库的调用方式</h3><p>写过NPM的包的同学很清楚，一个包通常会有一个入口文件，我们将所有的模块都放在这个入口文件中，以便其他开发者调用。但是如果仅仅只用了一个包中很少一个模块，那么从入口文件调用就会导致增加了很多多余的模块。为此，我们应该改变一些库的调用方式，来避免这种情况，比如：</p>
<p>React Bootstrap 应该这么调用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> IndexLink <span class="keyword">from</span> <span class="string">'react-router/lib/IndexLink'</span>;</div><div class="line"><span class="keyword">import</span> Navbar <span class="keyword">from</span> <span class="string">'react-bootstrap/lib/Navbar'</span>;</div><div class="line"><span class="keyword">import</span> Nav <span class="keyword">from</span> <span class="string">'react-bootstrap/lib/Nav'</span>;</div><div class="line"><span class="keyword">import</span> NavItem <span class="keyword">from</span> <span class="string">'react-bootstrap/lib/NavItem'</span>;</div></pre></td></tr></table></figure>
<p>不应该这么调用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; IndexLink, Navbar, Nav, NavItem &#125;<span class="keyword">from</span> <span class="string">'react-router'</span>;</div></pre></td></tr></table></figure>
<p>React Router 应该这么调用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Route <span class="keyword">from</span> <span class="string">'react-router/lib/Route'</span>;</div><div class="line"><span class="keyword">import</span> IndexRoute <span class="keyword">from</span> <span class="string">'react-router/lib/IndexRoute'</span>;</div></pre></td></tr></table></figure>
<p>不应该这么调用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Route, IndexRoute &#125; <span class="keyword">from</span> <span class="string">'react-router/lib/Route'</span>;</div></pre></td></tr></table></figure>
<p>这种改进方式所带来的效果非常明显，至少能减少100kb的重量。</p>
<p>除此之外，Bootstrap的样式文件也应该进行自定义，并去除一些不用的模块。最终我们项目中所有的样式文件合并后也只有22kb（gzip 压缩后）。</p>
<h3 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h3><p>使用 webpack 1.x 的 <code>require.ensure</code> 可以轻易实现代码分割。分割的对象主要有俩个：</p>
<ol>
<li>路由组件 </li>
<li>只在个别页面使用的大型第三方库</li>
</ol>
<p>路由组件的分割意义不大，因为我们写的代码几乎很少（这也正是使用库和框架的意义），即便按需加载，也不会带来太多的提升。而且，原本打包成一个文件，可以进行代码去重，但分割后就无法实现这个功能了（当然，如果你将公共库提取出来了，这个问题就不存在了）。不过，如果你的项目非常庞大，也可以试试。</p>
<p>分割只在个别页面使用的大型第三方库是有意义的。比如，我们项目中一些页面使用了很重的 Highcharts，但也有很多页面不需要它，如果不对其进行代码分割，就会连累不使用 Highcharts 的页面。所以应该对只在个别页面使用的大型第三方库进行分割。方法如下：</p>
<p>将这些库使用 <code>require.ensure</code> 封装成 Promise：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> loadHighcharts = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span> &#123;</div><div class="line">  <span class="built_in">require</span>.ensure([], (<span class="built_in">require</span>)=&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.Highcharts) &#123;</div><div class="line">      <span class="built_in">window</span>.Highcharts = <span class="built_in">require</span>(<span class="string">'highcharts'</span>);</div><div class="line">    &#125;</div><div class="line">    resolve(<span class="built_in">window</span>.Highcharts);</div><div class="line">  &#125;, <span class="string">'highcharts'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>然后，在组件中调用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; loadHighcharts &#125; <span class="keyword">from</span> <span class="string">'../Map/load'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chart</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    loadHighcharts()</div><div class="line">      .then(<span class="function"><span class="params">Highcharts</span> =&gt;</span> &#123;</div><div class="line">        ...</div><div class="line">        this.chart = Highcharts.chart(<span class="keyword">this</span>.container, config);</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    <span class="keyword">this</span>.chart.destroy();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></div><div class="line">        <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt; &#123;</div><div class="line">          this.container = c;</div><div class="line">        &#125;&#125;</div><div class="line">        style=&#123;&#123;</div><div class="line">          height: 400,</div><div class="line">          minWidth: 310,</div><div class="line">          margin: '0 auto',</div><div class="line">          textAlign:'center'</div><div class="line">        &#125;&#125;</div><div class="line">      &gt;</div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">"fa fa-spinner fa-spin fa-2x fa-fw"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="启用-gzip-压缩"><a href="#启用-gzip-压缩" class="headerlink" title="启用 gzip 压缩"></a>启用 gzip 压缩</h3><p>启用 gzip 压缩的效果更加明显，往往能减少 70% 的重量，最终我们项目的代码重量一共只有130kb（包含了React Bootstrap、React Rouer 在内的N多重量级第三方库，另外还有所有的页面代码在里面）。这个方法比较常见，不再赘述。</p>
<p>减小重量的方法就先聊到这吧！</p>
<h2 id="使用更少的样板代码发起异步action"><a href="#使用更少的样板代码发起异步action" class="headerlink" title="使用更少的样板代码发起异步action"></a>使用更少的样板代码发起异步action</h2><p>很多人说 Redux 代码多，开发效率低。其实 Redux 是可以灵活使用以及拓展的，经过充分定制的 Redux 其实写不了几行代码。今天先介绍一个很好用的 Redux 拓展—— <a href="https://github.com/lewis617/redux-amrc" target="_blank" rel="external">redux-amrc</a>。它可以帮助我们使用更少的样板代码发起异步action。</p>
<p>一般情况下，为了清楚地记录异步的过程，我们需要使用 三个 action 来记录状态变化。通常，我们的代码会是这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> USER_REQUEST = <span class="string">'USER_REQUEST'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> USER_SUCCESS = <span class="string">'USER_SUCCESS'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> USER_FAILURE = <span class="string">'USER_FAILURE'</span></div></pre></td></tr></table></figure>
<p>使用了 redux-amrc 后，再也不用写这么多action了，甚至连处理这些action的reducer都不用写，你只需要把异步以Promise的形式传给 redux-amrc就行了：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ASYNC &#125; <span class="keyword">from</span> <span class="string">'redux-amrc'</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 这个action创建函数可以帮你自动发起 LOAD 和 LOAD_SUCCESS,</div><div class="line"> * state.async.[key] 将会变为 'success'</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    [ASYNC]: &#123;</div><div class="line">      <span class="attr">key</span>: <span class="string">'key'</span>,</div><div class="line">      <span class="attr">promise</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(<span class="string">'success'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 这个action创建函数可以帮你自动发起 LOAD 和 LOAD_FAIL,</div><div class="line"> * state.async.loadState.[key].error 将会变为 'fail'</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    [ASYNC]: &#123;</div><div class="line">      <span class="attr">key</span>: <span class="string">'key'</span>,</div><div class="line">      <span class="attr">promise</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.reject(<span class="string">'fail'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多的使用方法，请参考<a href="https://lewis617.github.io/redux-amrc/">官网文档</a>。</p>
<h2 id="与-传统的DOM操作相结合"><a href="#与-传统的DOM操作相结合" class="headerlink" title="与 传统的DOM操作相结合"></a>与 传统的DOM操作相结合</h2><p>React 强调声明式构建用户界面，但在一些情况下，往往还是操作 DOM 来得快。事实上，在 React 中操作 DOM 也很方便。现将一些场景列举如下：</p>
<h3 id="使用Canvas"><a href="#使用Canvas" class="headerlink" title="使用Canvas"></a>使用Canvas</h3><p>有时候我们需要使用 Canvas 画个多边形什么的，尽管已经有很多封装 Canvas 的 React 库了，但命令式的 Canvas 画法也非常方便，可以直接在React 中使用：</p>
<p>比如，这么一个画多边形的方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用canvas画多边形</div><div class="line"> * @param c：canvas context</div><div class="line"> * @param n：多边形的边数</div><div class="line"> * @param r：多边形的半径</div><div class="line"> * @param color：线条颜色</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawHexagon</span>(<span class="params">c, n, r, color</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> context = c;</div><div class="line">  <span class="keyword">const</span> x = context.canvas.width / <span class="number">2</span>;</div><div class="line">  <span class="keyword">const</span> y = context.canvas.height / <span class="number">2</span>;</div><div class="line">  <span class="keyword">const</span> ang = (<span class="built_in">Math</span>.PI * <span class="number">2</span>) / n; <span class="comment">// 旋转的角度</span></div><div class="line">  context.save();<span class="comment">// 保存状态</span></div><div class="line">  context.fillStyle = <span class="string">'transparent'</span>;<span class="comment">// 填充颜色</span></div><div class="line">  context.strokeStyle = color;<span class="comment">// 填充线条颜色</span></div><div class="line">  context.lineWidth = <span class="number">1</span>;<span class="comment">// 设置线宽</span></div><div class="line">  context.translate(x, y);<span class="comment">// 原点移到x,y处，即要画的多边形中心</span></div><div class="line">  context.moveTo(<span class="number">0</span>, -r);<span class="comment">// 据中心r距离处画点</span></div><div class="line">  context.beginPath();</div><div class="line">  context.rotate(ang / <span class="number">2</span>);<span class="comment">// 旋转</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</div><div class="line">    context.rotate(ang);<span class="comment">// 旋转</span></div><div class="line">    context.lineTo(<span class="number">0</span>, -r);<span class="comment">// 据中心r距离处连线</span></div><div class="line">  &#125;</div><div class="line">  context.closePath();</div><div class="line">  context.stroke();</div><div class="line">  context.fill();</div><div class="line">  context.restore();<span class="comment">// 返回原始状态</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以这么在 React 中用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hexagon</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="attr">title</span>: PropTypes.string.isRequired,</div><div class="line">    <span class="attr">content</span>: PropTypes.array.isRequired</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>.canvas.getContext(<span class="string">'2d'</span>);</div><div class="line">    <span class="keyword">const</span> sin60 = <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">3</span>);</div><div class="line">    drawHexagon(context, <span class="number">6</span>, <span class="number">80</span> / sin60, <span class="string">'#D9DADB'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span></span></div><div class="line">          <span class="attr">width</span>=<span class="string">"190px"</span></div><div class="line">          <span class="attr">height</span>=<span class="string">"170px"</span></div><div class="line">          <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt; &#123;</div><div class="line">            this.canvas = c;</div><div class="line">          &#125;&#125;</div><div class="line">        /&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实任何基于 DOM 的操作方法都可以这么玩！你可以把 <code>componentDidMount()</code> 当成 jQuery 的 <code>$(document).ready()</code> 方法。</p>
<h3 id="实现图表"><a href="#实现图表" class="headerlink" title="实现图表"></a>实现图表</h3><p>无论你之前使用的是 D3 还是 Highcharts，几乎都是基于 DOM 来完成图表的绘制的，在 React 中，如果你不想使用一些封装好的库，也可以操作DOM，方法和在 React 组件中画 Canvas 一样：</p>
<ul>
<li>渲染一个div </li>
<li>使用 ref 属性获取DOM  </li>
<li>操作DOM</li>
</ul>
<p>需要注意的是，如果你的库不够智能，那么你需要在 React 组件 卸载时 销毁操作DOM 产生的对象，以防止内存泄露。</p>
<h3 id="实现返回顶部"><a href="#实现返回顶部" class="headerlink" title="实现返回顶部"></a>实现返回顶部</h3><p>返回顶部这个功能也操作了 BOM 和 DOM，它与 React 的结合方法如下：</p>
<ul>
<li>使用 React 渲染一个 <code>a</code> 标签，并添加返回顶部的点击事件 </li>
<li>在组件挂载和卸载时分别添加和移除 <code>window</code> 的 <code>scroll</code> 事件来显示或隐藏返回顶部的 <code>a</code> 标签</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollLink</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">linkStyle</span>: &#123; <span class="attr">display</span>: <span class="string">'none'</span> &#125; &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillMount() &#123;</div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleScroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> top = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop;</div><div class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">linkStyle</span>: &#123; <span class="attr">display</span>: top &gt; <span class="number">100</span> ? <span class="string">'block'</span> : <span class="string">'none'</span> &#125; &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  scrollToTop = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> scrollTo = <span class="function">(<span class="params">element, to, duration</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (duration &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">      <span class="keyword">const</span> _element = element;</div><div class="line">      <span class="keyword">const</span> difference = to - _element.scrollTop;</div><div class="line">      <span class="keyword">const</span> perTick = (difference / duration) * <span class="number">10</span>;</div><div class="line"></div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        _element.scrollTop += perTick;</div><div class="line">        <span class="keyword">if</span> (_element.scrollTop === to) <span class="keyword">return</span>;</div><div class="line">        scrollTo(_element, to, duration - <span class="number">10</span>);</div><div class="line">      &#125;, <span class="number">10</span>);</div><div class="line">    &#125;;</div><div class="line">    scrollTo(<span class="built_in">document</span>.body, <span class="number">0</span>, <span class="number">100</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> styles = <span class="built_in">require</span>(<span class="string">'./index.scss'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">a</span></span></span></div><div class="line">        <span class="attr">className</span>=<span class="string">&#123;styles.scrollLink&#125;</span></div><div class="line">        <span class="attr">onClick</span>=<span class="string">&#123;this.scrollToTop&#125;</span></div><div class="line">        <span class="attr">style</span>=<span class="string">&#123;this.state.linkStyle&#125;</span></div><div class="line">      &gt;</div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">"glyphicon glyphicon-arrow-up"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default ScrollLink;</div></pre></td></tr></table></figure>
<p>React 与 Redux 的实践经验还有很多，由于篇幅原因，在后续的博文中我们再一一介绍。</p>
<hr>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><em>如果您觉得本博客教程帮到了您，就赏颗星吧！</em></p>
<p><a href="https://github.com/lewis617/react-redux-tutorial" target="_blank" rel="external">https://github.com/lewis617/react-redux-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间使用 React 与 Redux 重构了我们360网络安全研究院的 &lt;a href=&quot;http://data.netlab.360.com/&quot;&gt;开放数据平台&lt;/a&gt;。现将其中一些技术实践经验总结如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://lewis617.github.io/tags/React/"/>
    
      <category term="Redux" scheme="https://lewis617.github.io/tags/Redux/"/>
    
      <category term="Universal" scheme="https://lewis617.github.io/tags/Universal/"/>
    
  </entry>
  
  <entry>
    <title>《React 与 Redux 开发实例精解》出版了！</title>
    <link href="https://lewis617.github.io/2016/11/20/r2-book/"/>
    <id>https://lewis617.github.io/2016/11/20/r2-book/</id>
    <published>2016-11-20T08:14:00.000Z</published>
    <updated>2016-12-19T12:59:38.807Z</updated>
    
    <content type="html"><![CDATA[<p>《React 与 Redux 开发实例精解》出版了！</p>
<p><img src="https://ws1.sinaimg.cn/large/83900b4egw1fa3f51f6jyj20h00m8jv0.jpg" alt=""></p>
<h2 id="关于-React-与-Redux"><a href="#关于-React-与-Redux" class="headerlink" title="关于 React 与 Redux"></a>关于 React 与 Redux</h2><p>React 与 Redux， 一个快如鬼魅，一个清晰明了，各个巨头在生产环境对其进行了无数次的测试，强大的社区又为其提供了无数个场景的解决方案，是目前国际上最主流，最先进的前端技术选型。</p>
<h2 id="关于这本书"><a href="#关于这本书" class="headerlink" title="关于这本书"></a>关于这本书</h2><p>《React 与 Redux 开发实例精解》这本书不仅讲解了 React 与 Redux 的基础和实战，更注重 Universal 渲染、函数式编程和项目架构的介绍。笔者一直在360的生产环境中使用这本书上的技术，感觉非常靠谱。希望读者可以喜欢这本书，也希望这本书能帮到更多的人，更希望国内有更多的基于 React 与 Redux 搭建的优秀项目出现！</p>
<h2 id="售书链接"><a href="#售书链接" class="headerlink" title="售书链接"></a>售书链接</h2><p><a href="https://item.jd.com/12010463.html" target="_blank" rel="external">京东</a></p>
<p><a href="http://product.dangdang.com/24145390.html" target="_blank" rel="external">当当</a></p>
<p><a href="https://www.amazon.cn/React%E4%B8%8ERedux%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B%E7%B2%BE%E8%A7%A3-%E5%88%98%E4%B8%80%E5%A5%87/dp/B01N0EJCZR/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1480424464&amp;sr=1-1&amp;keywords=React%E4%B8%8ERedux" target="_blank" rel="external">亚马逊</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《React 与 Redux 开发实例精解》出版了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/83900b4egw1fa3f51f6jyj20h00m8jv0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于-Rea
    
    </summary>
    
    
      <category term="React" scheme="https://lewis617.github.io/tags/React/"/>
    
      <category term="Redux" scheme="https://lewis617.github.io/tags/Redux/"/>
    
      <category term="Universal" scheme="https://lewis617.github.io/tags/Universal/"/>
    
      <category term="Babel" scheme="https://lewis617.github.io/tags/Babel/"/>
    
      <category term="Webpack" scheme="https://lewis617.github.io/tags/Webpack/"/>
    
      <category term="Node" scheme="https://lewis617.github.io/tags/Node/"/>
    
      <category term="函数式编程" scheme="https://lewis617.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="图书" scheme="https://lewis617.github.io/tags/%E5%9B%BE%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>使用 React、Redux 和 Bootstrap 实现 Alert（测试篇）</title>
    <link href="https://lewis617.github.io/2016/11/17/r2-bs-alert-test/"/>
    <id>https://lewis617.github.io/2016/11/17/r2-bs-alert-test/</id>
    <published>2016-11-17T18:56:00.000Z</published>
    <updated>2016-12-19T12:59:38.807Z</updated>
    
    <content type="html"><![CDATA[<p>上节课我们学习了如何 <a href="https://lewis617.github.io/2016/11/16/r2-bs-alert/">使用 React、Redux 和 Bootstrap 实现 Alert</a> 。今天，我们学习如何测试它们！</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这个例子实现了弹出不同类型信息的功能，这些信息默认会在5秒后消失，你也可以手动点击使其消失。如果你在服务端有信息要提示，还可以通过 Redux 的单一数据源传到客户端在渲染页面时显示出来。</p>
<p><img src="https://raw.githubusercontent.com/lewis617/react-redux-tutorial/master/r2-bs-alert/public/r2-bs-alert.gif" alt=""></p>
<p>源代码：</p>
<p><a href="https://github.com/lewis617/react-redux-tutorial/tree/master/r2-bs-alert" target="_blank" rel="external">https://github.com/lewis617/react-redux-tutorial/tree/master/r2-bs-alert</a></p>
<p>安装：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i</div></pre></td></tr></table></figure>
<p>开发环境下运行：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure>
<p>生产环境下构建：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="built_in">test</span></div></pre></td></tr></table></figure>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>由于 create-react-app 已经帮我们集成了 <a href="https://facebook.github.io/jest/" target="_blank" rel="external">Jest</a> 作为测试运行器，甚至还帮我们默认添加了 <a href="https://github.com/tmpvar/jsdom" target="_blank" rel="external">jsdom</a>，用于模拟浏览器环境，因此我们只需要再添加很少一部分测试工具，就可以开始测试了！本例添加的测试工具包括：</p>
<ul>
<li>redux-mock-store：帮我们模拟 redux 的 store，方便我们测试 action creator。</li>
<li>enzyme：Airbnb的测试工具，用于测试 React 组件。</li>
</ul>
<p>它们的详细用法，可以参考相应的官网文档。</p>
<h2 id="测试-Redux"><a href="#测试-Redux" class="headerlink" title="测试 Redux"></a>测试 Redux</h2><p>测试 Redux 包括：</p>
<ul>
<li>测试 action creator</li>
<li>测试 reducer</li>
</ul>
<p>下面两节，我们分开讲解它们的测试方法。</p>
<h3 id="测试-action-creator"><a href="#测试-action-creator" class="headerlink" title="测试 action creator"></a>测试 action creator</h3><p>测试未经中间件加工的 action creator 还是比较简单的。它们的测试方法是直接使用断言判断这些 action creator 的返回值即可。</p>
<p>如果使用了中间件，就比较麻烦了，因为中间件加工了 <code>dispatch</code>，action creator 的执行过程会变得复杂。但所幸有工具可以帮我们模拟这个过程，进而降低测试 action creator 的难度，这个工具就是 redux-mock-store。我们应该先用 redux-mock-store 模拟一个 store，然后连入需要的中间件（本例是 thunk ），最后使用不同的 initial state 作为前提条件，来测试 action creator。</p>
<p>src/alert/__tests__/redux.test.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'redux-mock-store'</span>;</div><div class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</div><div class="line"><span class="keyword">import</span> reducer, &#123; ALERT_SHOW, ALERT_HIDE, alertShow, alertHide, alertMessage, hideAllAlert &#125; <span class="keyword">from</span> <span class="string">'../redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> middlewares = [thunk];</div><div class="line"><span class="keyword">const</span> mockStore = configureStore(middlewares);</div><div class="line"></div><div class="line">describe(<span class="string">'action test'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'alertShow should create ALERT_SHOW'</span>, () =&gt; &#123;</div><div class="line">    expect(alertShow(<span class="string">'message'</span>, <span class="string">'success'</span>, <span class="number">0</span>))</div><div class="line">      .toEqual(&#123;</div><div class="line">        <span class="attr">payload</span>: &#123;</div><div class="line">          <span class="attr">messageText</span>: <span class="string">'message'</span>,</div><div class="line">          <span class="attr">messageType</span>: <span class="string">'success'</span>,</div><div class="line">          <span class="attr">key</span>: <span class="number">0</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">type</span>: ALERT_SHOW</div><div class="line">      &#125;);</div><div class="line">  &#125;);</div><div class="line">  it(<span class="string">'alertHide should create ALERT_HIDE'</span>, () =&gt; &#123;</div><div class="line">    expect(alertHide(<span class="number">0</span>))</div><div class="line">      .toEqual(&#123;</div><div class="line">        <span class="attr">payload</span>: &#123;</div><div class="line">          <span class="attr">key</span>: <span class="number">0</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">type</span>: ALERT_HIDE</div><div class="line">      &#125;);</div><div class="line">  &#125;);</div><div class="line">  it(<span class="string">'alertMessage should create ALERT_SHOW and create ALERT_HIDE after delay'</span>, (done) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> expectedActions = [</div><div class="line">      alertShow(<span class="string">'message'</span>, <span class="string">'success'</span>, <span class="number">1</span>)</div><div class="line">    ];</div><div class="line">    <span class="keyword">const</span> getState = &#123; <span class="attr">alerts</span>: &#123; <span class="attr">lastKey</span>: <span class="number">0</span>, <span class="attr">items</span>: [] &#125; &#125;;</div><div class="line">    <span class="keyword">const</span> store = mockStore(getState);</div><div class="line">    store.dispatch(alertMessage(<span class="string">'message'</span>, <span class="string">'success'</span>, <span class="number">0</span>));</div><div class="line">    expect(store.getActions()).toEqual(expectedActions);</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      expect(store.getActions()).toEqual(expectedActions.concat([alertHide(<span class="number">1</span>)]));</div><div class="line">      done();</div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">  &#125;);</div><div class="line">  it(<span class="string">'hideAllAlert should create multi ALERT_HIDE after delay'</span>, (done) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> expectedActions = [</div><div class="line">      alertHide(<span class="number">0</span>),</div><div class="line">      alertHide(<span class="number">1</span>)</div><div class="line">    ];</div><div class="line">    <span class="keyword">const</span> getState = &#123; <span class="attr">alerts</span>: &#123; <span class="attr">lastKey</span>: <span class="number">1</span>, <span class="attr">items</span>: [&#123; <span class="attr">key</span>: <span class="number">0</span> &#125;, &#123; <span class="attr">key</span>: <span class="number">1</span> &#125;] &#125; &#125;;</div><div class="line">    <span class="keyword">const</span> store = mockStore(getState);</div><div class="line">    store.dispatch(hideAllAlert(<span class="number">0</span>));</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      expect(store.getActions()).toEqual(expectedActions);</div><div class="line">      done();</div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="测试-reducer"><a href="#测试-reducer" class="headerlink" title="测试 reducer"></a>测试 reducer</h3><p>由于 reducer 是纯函数，所以测试起来非常简单，直接使用断言判断输入输出即可。</p>
<p>src/alert/__tests__/redux.test.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'../redux'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'reducer test'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'should handle alertShow action'</span>, () =&gt; &#123;</div><div class="line">    expect(reducer(&#123; <span class="attr">items</span>: [], <span class="attr">lastKey</span>: <span class="number">-1</span> &#125;, alertShow(<span class="string">'message'</span>, <span class="string">'success'</span>, <span class="number">0</span>))).toEqual(&#123;</div><div class="line">      <span class="attr">items</span>: [&#123;</div><div class="line">        <span class="attr">messageText</span>: <span class="string">'message'</span>,</div><div class="line">        <span class="attr">messageType</span>: <span class="string">'success'</span>,</div><div class="line">        <span class="attr">key</span>: <span class="number">0</span></div><div class="line">      &#125;],</div><div class="line">      <span class="attr">lastKey</span>: <span class="number">0</span></div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  it(<span class="string">'should handle alertHide action'</span>, () =&gt; &#123;</div><div class="line">    expect(reducer(&#123;</div><div class="line">      <span class="attr">items</span>: [&#123; <span class="attr">messageText</span>: <span class="string">'message'</span>, <span class="attr">messageType</span>: <span class="string">'success'</span>, <span class="attr">key</span>: <span class="number">0</span> &#125;],</div><div class="line">      <span class="attr">lastKey</span>: <span class="number">0</span></div><div class="line">    &#125;, alertHide(<span class="number">0</span>))).toEqual(&#123; <span class="attr">items</span>: [], <span class="attr">lastKey</span>: <span class="number">0</span> &#125;);</div><div class="line">  &#125;);</div><div class="line">  it(<span class="string">'should handle unknown action'</span>, () =&gt; &#123;</div><div class="line">    expect(reducer([], &#123; <span class="attr">type</span>: <span class="string">'unknown'</span> &#125;)).toEqual([]);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="测试-React-组件"><a href="#测试-React-组件" class="headerlink" title="测试 React 组件"></a>测试 React 组件</h2><p>测试 React 组件主要包括：</p>
<ul>
<li>测试 React 组件的渲染结果</li>
<li>模拟用户行为，测试 React 组件的反应变化</li>
</ul>
<p>为此，我们需要使用工具将组件渲染出来，然后这个工具还得能模拟用户行为。enzyme 就是专门为此设计的测试工具。下面，我们将会使用它来测试 React 组件。</p>
<p>本例的 React 组件是一个 AlertList，它有两个功能：</p>
<ol>
<li>渲染 Alert 后，延迟几秒消失</li>
<li>点击每个 Alert，会使其消失</li>
</ol>
<p>因此，我们的测试应该这么写：</p>
<ol>
<li>创建 store，并使用 Provider 包括被测试的组件，然后使用 mount 渲染它。</li>
<li>从渲染后的结果中提取需要测试的部分。</li>
<li>根据 AlertList 的两个功能编写测试用例。</li>
</ol>
<blockquote>
<p><code>mount</code> 是 enzyme 提供的深度渲染的函数。“深度渲染”是指渲染出完整的DOM的方法，它是相对于“浅渲染”的一个概念，关于“深度渲染”和“浅渲染”的更多的细节请参考 enzyme 的官网文档。</p>
</blockquote>
<p>另外，由于我们测试逻辑中包含一个5000ms的异步过程，因此，编写测试用例前，需要将超时时间设置为大于5000ms的值 ，否则我们的测试程序将会显示超时错误。</p>
<p>测试代码清单：</p>
<p>src/alert/__tests__/AlertList.test.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createStore, combineReducers, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AlertList, reducer &#125; <span class="keyword">from</span> <span class="string">'../index'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">state = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> store = createStore(</div><div class="line">    combineReducers(&#123; <span class="attr">alerts</span>: reducer &#125;),</div><div class="line">    state,</div><div class="line">    applyMiddleware(thunk)</div><div class="line">  );</div><div class="line">  <span class="keyword">const</span> app = mount(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">AlertList</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line">  );</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    app,</div><div class="line">    store</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">describe(<span class="string">'AlertList'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">let</span> originalTimeout;</div><div class="line">  beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;</div><div class="line">    jasmine.DEFAULT_TIMEOUT_INTERVAL = <span class="number">10000</span>;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  afterEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    jasmine.DEFAULT_TIMEOUT_INTERVAL = originalTimeout;</div><div class="line">  &#125;);</div><div class="line">  it(<span class="string">'should display messages and hide all after delay'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> &#123; app &#125; = setup(&#123; <span class="attr">alerts</span>: &#123; <span class="attr">lastKey</span>: <span class="number">1</span>, <span class="attr">items</span>: [&#123; <span class="attr">key</span>: <span class="number">0</span> &#125;, &#123; <span class="attr">key</span>: <span class="number">1</span> &#125;] &#125; &#125;);</div><div class="line">    expect(app.find(<span class="string">'.alert'</span>).length).toBe(<span class="number">2</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        resolve();</div><div class="line">      &#125;, <span class="number">5000</span>)</div><div class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      expect(app.find(<span class="string">'.alert'</span>).length).toBe(<span class="number">0</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'should display messages and hide itself after clicked'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> &#123; app &#125; = setup(&#123;</div><div class="line">      <span class="attr">alerts</span>: &#123;</div><div class="line">        <span class="attr">lastKey</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">items</span>: [&#123; <span class="attr">key</span>: <span class="number">0</span>, <span class="attr">messageText</span>: <span class="string">'messageText1'</span> &#125;, &#123; <span class="attr">key</span>: <span class="number">1</span>, <span class="attr">messageText</span>: <span class="string">'messageText2'</span> &#125;]</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    app.find(<span class="string">'.alert'</span>).at(<span class="number">1</span>).find(<span class="string">'button'</span>).at(<span class="number">0</span>)</div><div class="line">      .simulate(<span class="string">'click'</span>);</div><div class="line">    expect(app.find(<span class="string">'.alert'</span>).text()).not.toMatch(<span class="regexp">/messageText2/</span>);</div><div class="line">    expect(app.find(<span class="string">'.alert'</span>).text()).toMatch(<span class="regexp">/messageText1/</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>至此，我们的测试就写完了！</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>很多新手开发者不愿意写测试，对此，我的建议是：</p>
<blockquote>
<p>如果你不想写测试，那就不要逼自己学习测试。等你被无聊反复的手动测试折磨到忍无可忍，或着，等你觉得运行一个小型的独立功能模块却要非常麻烦的时候，你自然就愿意学了！</p>
</blockquote>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/react-redux-tutorial" target="_blank" rel="external">https://github.com/lewis617/react-redux-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上节课我们学习了如何 &lt;a href=&quot;https://lewis617.github.io/2016/11/16/r2-bs-alert/&quot;&gt;使用 React、Redux 和 Bootstrap 实现 Alert&lt;/a&gt; 。今天，我们学习如何测试它们！&lt;/p&gt;
    
    </summary>
    
    
      <category term="测试" scheme="https://lewis617.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="React" scheme="https://lewis617.github.io/tags/React/"/>
    
      <category term="Redux" scheme="https://lewis617.github.io/tags/Redux/"/>
    
      <category term="Bootstrap" scheme="https://lewis617.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>使用 React、Redux 和 Bootstrap 实现 Alert</title>
    <link href="https://lewis617.github.io/2016/11/16/r2-bs-alert/"/>
    <id>https://lewis617.github.io/2016/11/16/r2-bs-alert/</id>
    <published>2016-11-16T18:56:00.000Z</published>
    <updated>2016-12-19T12:59:38.807Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我们来学习使用 React、Redux 和 Bootstrap 实现 Alert。</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这个例子实现了弹出不同类型信息的功能，这些信息默认会在5秒后消失，你也可以手动点击使其消失。如果你在服务端有信息要提示，还可以通过 Redux 的单一数据源传到客户端在渲染页面时显示出来。</p>
<p><img src="https://raw.githubusercontent.com/lewis617/react-redux-tutorial/master/r2-bs-alert/public/r2-bs-alert.gif" alt=""></p>
<p>源代码：</p>
<p><a href="https://github.com/lewis617/react-redux-tutorial/tree/master/r2-bs-alert" target="_blank" rel="external">https://github.com/lewis617/react-redux-tutorial/tree/master/r2-bs-alert</a></p>
<p>安装：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i</div></pre></td></tr></table></figure>
<p>开发环境下运行：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure>
<p>生产环境下构建：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="built_in">test</span></div></pre></td></tr></table></figure>
<h2 id="为何使用-Redux-？"><a href="#为何使用-Redux-？" class="headerlink" title="为何使用 Redux ？"></a>为何使用 Redux ？</h2><p>React 有自己的局部状态（Local State），可以帮助我们在不同状态下渲染不同的界面。那么实现 Alert 为何要使用 Redux ？众所周知，Alert 通常都是要在程序中全局使用的：</p>
<ul>
<li>用户操作可能会发出 Alert。 </li>
<li>网络请求等异步事件的处理器（Event Handler）可能会发出 Alert。</li>
<li>甚至服务器渲染页面时，也可能会给客户端带来一个Alert（比如，你提交表单出错了，服务器重定向到表单页面，并显示错误提示）。</li>
</ul>
<p>知道了 Alert 要全局使用，我们再来看 Redux。Redux 有一个全局单一的数据源，这个数据源可以通过 react-redux 连接到程序的任意一个组件。不但如此，更新这个数据源的 action，也可以全局使用：</p>
<ul>
<li>用户操作可以发起 action。</li>
<li>网络请求等异步事件的处理器（Event Handler）可能会发起 action。</li>
<li>甚至在服务器端也可以发起 action，然后将单一数据源传给客户端继续使用。</li>
</ul>
<p>Redux 牛逼的设计让处理全局状态变得特别方便，实现 Universal 渲染（有些人喜欢叫SSR，但我觉得不准确）也变得非常容易。这与实现 Alert 的需求非常吻合，因此，本文通过 Redux 来辅助实现 Alert。<br>从另一个方面来说，一些不在全局使用的组件和功能，一般使用React的局部状态就可以了，切记不要什么功能都用 Redux 实现。</p>
<p>了解了为何要使用 Redux，我们就开始动工吧！</p>
<h2 id="快速创建项目"><a href="#快速创建项目" class="headerlink" title="快速创建项目"></a>快速创建项目</h2><p>搭建一个 React APP 的成本是很高的，你需要：</p>
<ul>
<li>使用 Webpack 打包。</li>
<li>使用 Babel 编译。 </li>
<li>搭建开发服务器。 </li>
<li>使用 ESLint 进行语法检查。 </li>
<li>使用 Mocha 或 Jest 进行测试。 </li>
<li>……</li>
</ul>
<p>很多人诟病这一点，不过这些东西都是重复性的体力活，社区早就造好了轮子，来提高生产力。本文就使用了 <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">create-react-app</a> 来快速搭建项目。All you need is these command:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install -g create-react-app</div><div class="line"></div><div class="line">create-react-app my-app</div><div class="line"><span class="built_in">cd</span> my-app/</div><div class="line">npm start</div></pre></td></tr></table></figure>
<p>然后上述所有东西就都有了！</p>
<blockquote>
<p>注意，要将 npm 设为淘宝源或你自己公司的私有 npm 源（只要快就行），否则速度会非常慢，甚至可能导致安装失败。</p>
</blockquote>
<p>接下来，我们就开始编写代码。</p>
<h2 id="设计编写-Redux"><a href="#设计编写-Redux" class="headerlink" title="设计编写 Redux"></a>设计编写 Redux</h2><p>在一个 React 与 Redux 中的程序中，React 负责程序界面，而 Redux 负责程序功能。由于本例界面比较容易，所以我们先来设计 Redux。</p>
<p>我们期望的Alert 的功能包括：</p>
<ul>
<li>显示一条信息。 </li>
<li>隐藏一条信息。 </li>
<li>显示一条信息，过几秒自动隐藏。  </li>
<li>如果服务器传来有信息，在页面渲染完，过几秒也自动隐藏。</li>
</ul>
<p>功能明确了，让我们把它们写成函数：</p>
<ul>
<li>alertShow  </li>
<li>alertHide  </li>
<li>alertMessage  </li>
<li>hideAllAlert</li>
</ul>
<p>src/alert/redux.js</p>
<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> ALERT_SHOW = <span class="string">'ALERT_SHOW'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> ALERT_HIDE = <span class="string">'ALERT_HIDE'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">alertShow</span>(<span class="params">messageText, messageType, key</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: ALERT_SHOW,</div><div class="line">    <span class="attr">payload</span>: &#123;</div><div class="line">      messageText, messageType, key</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">alertHide</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: ALERT_HIDE,</div><div class="line">    <span class="attr">payload</span>: &#123; key &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">alertMessage</span>(<span class="params">messageText, messageType, delay = <span class="number">5000</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> messageText === <span class="string">'string'</span> &amp;&amp; [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>, <span class="string">'info'</span>].indexOf(messageType) &gt; <span class="number">-1</span>) &#123;</div><div class="line">      <span class="keyword">const</span> key = getState().alerts.lastKey + <span class="number">1</span>;</div><div class="line">      dispatch(alertShow(messageText, messageType, key));</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> dispatch(alertHide(key)), delay);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">console</span>.error(<span class="string">'messageText must be string and messageType must be success, warning, danger, info'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hideAllAlert</span>(<span class="params">delay = <span class="number">5000</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</div><div class="line">    getState().alerts.items.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        dispatch(alertHide(item.key));</div><div class="line">      &#125;, delay);</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>尽管部分逻辑有点复杂，但都封装在 action 创建函数中了，多么清晰和模块化！接下来，我们编写 reducer 来根据这些 action，进行 state 的更新。<br>src/alert/redux.js</p>
<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">state = &#123; lastKey: <span class="number">-1</span>, items: [] &#125;, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> ALERT_SHOW:</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...state,</div><div class="line">        <span class="attr">items</span>: [...state.items, action.payload],</div><div class="line">        <span class="attr">lastKey</span>: state.lastKey + <span class="number">1</span></div><div class="line">      &#125;;</div><div class="line">    <span class="keyword">case</span> ALERT_HIDE:</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...state,</div><div class="line">        <span class="attr">items</span>: state.items.filter(<span class="function"><span class="params">item</span> =&gt;</span> (item.key !== action.payload.key))</div><div class="line">      &#125;;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用了解构赋值和重写的语法来保证 state 的不可变（Immutable）。</p>
<blockquote>
<p>Redux 的 state 要求是不可变数据，这么做的原因是方便进行快速变更检查，进而有利于React组件判断是否需要重新渲染（re-render）。另外，不可变数据还有利于进行状态回退，错误追踪。不可变数据是函数式编程中一个常用的概念。关于不可变以及函数式编程在 React 与 Redux 中的应用，<a href="https://item.jd.com/12010463.html" target="_blank" rel="external">《React与Redux开发实例精解》</a> 这本书中有非常详细的介绍，推荐阅读参考。</p>
</blockquote>
<p>至此，Redux的编写就完成了。它的输出有四个：</p>
<ul>
<li>reducer函数，用于创建store。  </li>
<li>alertHide 函数用于隐藏指定信息。  </li>
<li>alertMessage 函数用于显示一条信息，并在几秒后隐藏。  </li>
<li>hideAllAlert 函数用于在渲染完页面后，过几秒隐藏服务器传来的信息。</li>
</ul>
<p>接下来，我们来编写 React 组件。</p>
<h2 id="设计编写-React-组件"><a href="#设计编写-React-组件" class="headerlink" title="设计编写 React 组件"></a>设计编写 React 组件</h2><p>React 组件的功能包括三个：</p>
<ul>
<li>渲染要显示的信息，并根据类型渲染成不同颜色。  </li>
<li>为每条信息渲染一个按钮，使用户可以通过点击按钮隐藏该信息。 </li>
<li>在第一次渲染后，过几秒隐藏来自服务器的信息。</li>
</ul>
<p>为此，我们做了以下几件事：</p>
<ul>
<li>首先，使用 react-redux 的 connect 将 Redux 的 state 和 action 创建函数传给组件。 </li>
<li>然后在组件中遍历渲染出所有信息（使用了 react-bootstrap 提供的 Alert 组件）。 </li>
<li>最后，将 alertHide 函数绑在按钮的点击事件上，将 hideAllAlert 函数绑在组件渲染后的生命周期钩子上。</li>
</ul>
<p>组件功能就实现了！</p>
<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">src/alert/AlertList.js</div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> Alert <span class="keyword">from</span> <span class="string">'react-bootstrap/lib/Alert'</span>;</div><div class="line"><span class="keyword">import</span> &#123; hideAllAlert, alertHide &#125; <span class="keyword">from</span> <span class="string">'./redux'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlertList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="attr">alerts</span>: PropTypes.array.isRequired,</div><div class="line">    <span class="attr">hideAllAlert</span>: PropTypes.func.isRequired,</div><div class="line">    <span class="attr">alertHide</span>: PropTypes.func.isRequired</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.props.hideAllAlert();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> &#123; alerts, alertHide &#125; = <span class="keyword">this</span>.props;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        &#123;alerts.map((item, i) =&gt; (</div><div class="line">          <span class="tag">&lt;<span class="name">Alert</span></span></div><div class="line">            <span class="attr">key</span>=<span class="string">&#123;i&#125;</span></div><div class="line">            <span class="attr">bsStyle</span>=<span class="string">&#123;item.messageType&#125;</span></div><div class="line">            <span class="attr">onDismiss</span>=<span class="string">&#123;()</span> =&gt; alertHide(item.key)&#125;</div><div class="line">          &gt;</div><div class="line">            &#123;item.messageText&#125;</div><div class="line">          <span class="tag">&lt;/<span class="name">Alert</span>&gt;</span></div><div class="line">        ))&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</div><div class="line">  <span class="function"><span class="params">state</span> =&gt;</span> (&#123;</div><div class="line">    <span class="attr">alerts</span>: state.alerts.items</div><div class="line">  &#125;),</div><div class="line">  &#123; hideAllAlert, alertHide &#125;</div><div class="line">)(AlertList);</div></pre></td></tr></table></figure>
<p>为了让 connect 可以获取到 Redux 的 state 和 dispatch 方法，我们还需要在组件顶部提供store。</p>
<p>src/index.js</p>
<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 三个参数分别为 reducer、initialState 和 enhancer</span></div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">  combineReducers(&#123; <span class="attr">alerts</span>: alertsReducer &#125;),</div><div class="line">  &#123;&#125;,</div><div class="line">  applyMiddleware(thunk)</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 在渲染之前发起action，用于模拟从服务器传来的信息</span></div><div class="line">store.dispatch(alertMessage(<span class="string">'message from server'</span>, <span class="string">'info'</span>));</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>为了使用 bootstrap，还需要安装 bootstrap，并引用它的样式文件。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i bootstrap@3 --save</div></pre></td></tr></table></figure>
<p>src/index.js</p>
<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'bootstrap/dist/css/bootstrap.css'</span>;</div></pre></td></tr></table></figure>
<p>至此，所有功能就都实现了！在后续的文章中，我们将介绍如何测试本例编写的 Redux 函数以及 React 组件。要知道，写测试是一个工程师走向成熟的必经之路，而且在 React 与 Redux 的应用中编写测试简直太方便了！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>Redux 适合实现全局性的组件和功能，一些局部使用的功能使用 React 的局部状态即可。  </li>
<li>推荐使用 create-react-app 来快速搭建React应用。</li>
<li>Redux 的 action 创建函数与要实现的功能一一对应。  </li>
<li>Redux 的 state 为不可变数据。</li>
<li>使用 react-redux 的 connect 将 Redux 的 state 和 action 创建函数连接到组件，进而渲染界面，绑定事件。</li>
</ul>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/react-redux-tutorial" target="_blank" rel="external">https://github.com/lewis617/react-redux-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我们来学习使用 React、Redux 和 Bootstrap 实现 Alert。&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://lewis617.github.io/tags/React/"/>
    
      <category term="Redux" scheme="https://lewis617.github.io/tags/Redux/"/>
    
      <category term="Bootstrap" scheme="https://lewis617.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Angular2系列教程（十一）路由嵌套、路由生命周期、matrix URL notation</title>
    <link href="https://lewis617.github.io/2016/04/04/ng2-router-2/"/>
    <id>https://lewis617.github.io/2016/04/04/ng2-router-2/</id>
    <published>2016-04-04T01:33:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们要讲的是 ng2 的路由的第二部分，包括路由嵌套、路由生命周期等知识点。</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>例子仍然是上节课的例子：</p>
<p><img src="https://ws2.sinaimg.cn/large/83900b4egw1f9xjj733w0j20bc0a8dgz.jpg" alt=""></p>
<p>上节课，我们讲解了英雄列表，这节课我们讲解危机中心。</p>
<p>源代码：</p>
<p><a href="https://github.com/lewis617/angular2-tutorial/tree/gh-pages/router" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial/tree/gh-pages/router</a></p>
<p>运行方法：</p>
<p>在根目录下运行：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http-server</div></pre></td></tr></table></figure>
<h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><p>我们在 app/app.component.ts 中定义了路由 URL 和视图组件，其中包括这样一项：</p>
<p>app/app.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">&#123; <span class="comment">// Crisis Center child route</span></div><div class="line">  path: <span class="string">'/crisis-center/...'</span>,</div><div class="line">  name: <span class="string">'CrisisCenter'</span>,</div><div class="line">  component: CrisisCenterComponent,</div><div class="line">  useAsDefault: <span class="literal">true</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>那个<code>...</code>就是代表这个 URL 下面可以定义子路由，也就是嵌套路由。嵌套路由是如何实现的？很简单，只需要在视图组件中再次配置路由即可：</p>
<p>app/crisis-center/crisis-center.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component&#125;     from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;RouteConfig, RouterOutlet&#125; from <span class="string">'angular2/router'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;CrisisListComponent&#125;   from <span class="string">'./crisis-list.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123;CrisisDetailComponent&#125; from <span class="string">'./crisis-detail.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123;CrisisService&#125;         from <span class="string">'./crisis.service'</span>;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">  template:  <span class="string">`</span></div><div class="line">    &lt;h2&gt;CRISIS CENTER&lt;/h2&gt;</div><div class="line">    &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class="line">  `,</div><div class="line">  directives: [RouterOutlet],</div><div class="line">  providers:  [CrisisService]</div><div class="line">&#125;)</div><div class="line">@RouteConfig([</div><div class="line">  &#123;path:<span class="string">'/'</span>,    name: <span class="string">'CrisisList'</span>,   component: CrisisListComponent, useAsDefault: <span class="literal">true</span>&#125;,</div><div class="line">  &#123;path:<span class="string">'/:id'</span>, name: <span class="string">'CrisisDetail'</span>, component: CrisisDetailComponent&#125;</div><div class="line">])</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> CrisisCenterComponent &#123; &#125;</div></pre></td></tr></table></figure>
<p>上述代码，我们干了几件事”：</p>
<ol>
<li>写了一个组件，包括<code>h2</code>和 <code>router-outlet</code></li>
<li>使用<code>@RouteConfig</code>，进行路由配置</li>
</ol>
<p>这样我们就实现了嵌套路由。就是这么简单。</p>
<h2 id="路由生命周期"><a href="#路由生命周期" class="headerlink" title="路由生命周期"></a>路由生命周期</h2><p>路由跳转到别的视图的时候，会触发一个路由的生命周期钩子：<code>routerCanDeactivate</code>:</p>
<p>app/crisis-center/crisis-detail.component.ts  </p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">routerCanDeactivate(next: ComponentInstruction, prev: ComponentInstruction) : <span class="built_in">any</span> &#123;</div><div class="line">  <span class="comment">// Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged.</span></div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.crisis || <span class="keyword">this</span>.crisis.name === <span class="keyword">this</span>.editName) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Otherwise ask the user with the dialog service and return its</span></div><div class="line">  <span class="comment">// promise which resolves to true or false when the user decides</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._dialog.confirm(<span class="string">'Discard changes?'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码，会在你修改完危机信息后，既不点击 save 也不点击 cancer 时候触发。也就是</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>._dialog.confirm(<span class="string">'Discard changes?'</span>);</div></pre></td></tr></table></figure>
<p>弹出一个对话框：</p>
<p><img src="https://ws1.sinaimg.cn/large/83900b4egw1f9xjj4z6gkj20c8058jrg.jpg" alt=""></p>
<p>这里为什么要使用单独的<code>dialog</code> 服务呢？为何不直接出发<code>window.confirm()？</code>因为路由的生命周期接受 Bool 或者 Promise 对象（ ng1 也是这样哦）。而<code>window.confirm</code> 并不返回一个promise对象，我们需要对其进行包装：  </p>
<p>app/dialog.service.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Async modal dialog service</div><div class="line"> * DialogService makes this app easier to test by faking this service.</div><div class="line"> * <span class="doctag">TODO:</span> better modal implemenation that doesn't use window.confirm</div><div class="line"> */</div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> DialogService &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Ask user to confirm an action. `message` explains the action and choices.</div><div class="line">   * Returns promise resolving to `true`=confirm or `false`=cancel</div><div class="line">   */</div><div class="line">  confirm(message?:<span class="built_in">string</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise&lt;<span class="built_in">boolean</span>&gt;((resolve, reject) =&gt;</div><div class="line">      resolve(<span class="built_in">window</span>.confirm(message || <span class="string">'Is it OK?'</span>)));</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们使用 Promise 包装了<code>confirm</code> 这个方法，使得这个服务，会触发<code>confirm</code>的同时，最后也能返回一个Promise。这样以来我们就可以在路由的生命周期中尽情的使用了！</p>
<p>值得一提的是 ng1 路由的<code>resolve</code>属性也是接受一个Promise，有兴趣的同学可以看我在 ng1 中对 wilddog 的路由改装：</p>
<p><a href="https://github.com/lewis617/wild-angular-seed/blob/gh-pages/components/wilddog.utils/wilddog.utils.js#L85" target="_blank" rel="external">https://github.com/lewis617/wild-angular-seed/blob/gh-pages/components/wilddog.utils/wilddog.utils.js#L85</a></p>
<h1 id="matrix-URL-notation"><a href="#matrix-URL-notation" class="headerlink" title="matrix URL notation"></a><em>matrix URL</em> notation</h1><p>当我们从危机详情视图返回危机列表视图的时候，我们发现 URL 变成了：</p>
<p><a href="http://localhost:63342/angular2-tutorial/router/index.html/crisis-center/;id=1;foo=foo" target="_blank" rel="external">http://localhost:63342/angular2-tutorial/router/index.html/crisis-center/;id=1;foo=foo</a></p>
<p><code>;id=1;foo=foo</code> 这个参数是我们没有见过的，我们知道query string一般都是<code>?</code>加<code>&amp;</code>，而这个参数则使用了<code>;</code>，这叫做 <em>matrix URL</em> notation。  </p>
<blockquote>
<p><em>Matrix URL</em> notation is an idea first floated in a <a href="http://www.w3.org/DesignIssues/MatrixURIs.html" target="_blank" rel="external">1996 proposal</a> by the founder of the web, Tim Berners-Lee.</p>
<p>Although matrix notation never made it into the HTML standard, it is legal and it became popular among browser routing systems as a way to isolate parameters belonging to parent and child routes. The Angular Component Router is such a system.</p>
<p>The syntax may seem strange to us but users are unlikely to notice or care as long as the URL can be emailed and pasted into a browser address bar as this one can.</p>
</blockquote>
<p>这是 ng2 官方文档对这个概念的解释，我们从中得知，这个概念用区分参数属于父视图还是子视图。</p>
<p>我们在上节课英雄列表中，发现 URL 是普通的 query string。为什么在这里变成了<em>matrix URL</em> notation？因为英雄列表视图没有子视图，没有嵌套路由的概念。而危机中心则使用了嵌套路由，拥有父子视图的嵌套，为了加一区分，ng2 的路由系统使用了 <em>matrix URL</em>  notation 这个概念。</p>
<hr>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/angular2-tutorial" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们要讲的是 ng2 的路由的第二部分，包括路由嵌套、路由生命周期等知识点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="https://lewis617.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Angular2系列教程（十）两种启动方法、两个路由服务、引用类型和单例模式的妙用</title>
    <link href="https://lewis617.github.io/2016/04/04/ng2-router-1/"/>
    <id>https://lewis617.github.io/2016/04/04/ng2-router-1/</id>
    <published>2016-04-04T00:49:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们要讲的是 ng2 的路由系统。</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://ws2.sinaimg.cn/large/83900b4egw1f9xkkfl4kwj20bc0a8dgz.jpg" alt=""></p>
<p>例子是官网的例子，包含一个”危机中心”和”英雄列表”，都在一个app中，通过路由来控制切换视图。还包含了Promise的用法，服务的用法等多个知识点。</p>
<p>源代码：</p>
<p><a href="https://github.com/lewis617/angular2-tutorial/tree/gh-pages/router" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial/tree/gh-pages/router</a></p>
<p>运行方法：</p>
<p>在根目录下运行：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http-server</div></pre></td></tr></table></figure>
<h2 id="引入库文件设置base-href"><a href="#引入库文件设置base-href" class="headerlink" title="引入库文件设置base href"></a>引入库文件设置base href</h2><p>路由并不在ng2中，需要我们额外引入，另外我们需要设置base href，这是个什么东西呢？相当于我们后续所有 URL 的”前缀”，因为我们的app默认是基于<a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries" target="_blank" rel="external">HTML 5 pushState</a> 风格的路由，所以我们需要加上base href，来保证当我们导航到深层次的 URL 时候，资源可以被正确加载：</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Add the router library --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/router.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Set the base href --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(<span class="string">'&lt;base href="'</span> + <span class="built_in">document</span>.location + <span class="string">'" /&gt;'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="两种启动方法"><a href="#两种启动方法" class="headerlink" title="两种启动方法"></a>两种启动方法</h2><p>app/main.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;bootstrap&#125;        from <span class="string">'angular2/platform/browser'</span>;</div><div class="line"><span class="keyword">import</span> &#123;ROUTER_PROVIDERS&#125; from <span class="string">'angular2/router'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;AppComponent&#125;     from <span class="string">'./app.component'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Add these symbols to override the `LocationStrategy`</span></div><div class="line"><span class="comment">//import &#123;provide&#125;           from 'angular2/core';</span></div><div class="line"><span class="comment">//import &#123;LocationStrategy,</span></div><div class="line"><span class="comment">//        HashLocationStrategy&#125; from 'angular2/router';</span></div><div class="line"></div><div class="line">bootstrap(AppComponent, [ROUTER_PROVIDERS,</div><div class="line">  <span class="comment">//provide(LocationStrategy,</span></div><div class="line">  <span class="comment">//       &#123;useClass: HashLocationStrategy&#125;) // .../#/crisis-center/</span></div><div class="line"> ]);</div></pre></td></tr></table></figure>
<p>这种启动方法采取默认的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries" target="_blank" rel="external">HTML 5 pushState</a> 风格，没有#号，但是存在一个弊端。就是当我们在子路经刷新浏览器时候，会出现404的错误。<del>解决办法可以将所有的路由都指向根目录，但是我们使用了http-server，显然不太方便设置。</del> （可以通过设置base href为“/“来解决！）所以还有另外一种风格，就是老式风格，和ng1一样的，带有#的路由风格，它的启动方法是：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;bootstrap&#125;        from <span class="string">'angular2/platform/browser'</span>;</div><div class="line"><span class="keyword">import</span> &#123;ROUTER_PROVIDERS&#125; from <span class="string">'angular2/router'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;AppComponent&#125;     from <span class="string">'./app.component'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Add these symbols to override the `LocationStrategy`</span></div><div class="line"><span class="keyword">import</span> &#123;provide&#125;           from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;LocationStrategy,</div><div class="line">    HashLocationStrategy&#125; from <span class="string">'angular2/router'</span>;</div><div class="line"></div><div class="line">bootstrap(AppComponent, [ROUTER_PROVIDERS,</div><div class="line">provide(LocationStrategy,</div><div class="line">     &#123;useClass: HashLocationStrategy&#125;) <span class="comment">// .../#/crisis-center/</span></div><div class="line">]);</div></pre></td></tr></table></figure>
<p>如此一来，我们的app的路由就全部带上#了，当你刷新页面时候，也不会出现404的错误了，但是url的可读性没有 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries" target="_blank" rel="external">HTML 5 pushState</a> 风格好看。</p>
<h2 id="ROUTER-DIRECTIVES、RouteConfig、routerLink、router-outlet"><a href="#ROUTER-DIRECTIVES、RouteConfig、routerLink、router-outlet" class="headerlink" title="ROUTER_DIRECTIVES、RouteConfig、routerLink、router-outlet"></a>ROUTER_DIRECTIVES、RouteConfig、routerLink、router-outlet</h2><p>路由的编写很简单，我们只需要在我们的组件中进行配置就行了：</p>
<p>app/app.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;RouteConfig, ROUTER_DIRECTIVES&#125; from <span class="string">'angular2/router'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;CrisisCenterComponent&#125; from <span class="string">'./crisis-center/crisis-center.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123;HeroListComponent&#125;     from <span class="string">'./heroes/hero-list.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123;HeroDetailComponent&#125;   from <span class="string">'./heroes/hero-detail.component'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;DialogService&#125;         from <span class="string">'./dialog.service'</span>;</div><div class="line"><span class="keyword">import</span> &#123;HeroService&#125;           from <span class="string">'./heroes/hero.service'</span>;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">  selector: <span class="string">'my-app'</span>,</div><div class="line">  template: <span class="string">`</span></div><div class="line">    &lt;h1 class="title"&gt;Component Router&lt;/h1&gt;</div><div class="line">    &lt;nav&gt;</div><div class="line">      &lt;a [routerLink]="['CrisisCenter']"&gt;Crisis Center&lt;/a&gt;</div><div class="line">      &lt;a [routerLink]="['Heroes']"&gt;Heroes&lt;/a&gt;</div><div class="line">    &lt;/nav&gt;</div><div class="line">    &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class="line">  `,</div><div class="line">  providers:  [DialogService, HeroService],</div><div class="line">  directives: [ROUTER_DIRECTIVES]</div><div class="line">&#125;)</div><div class="line">@RouteConfig([</div><div class="line"></div><div class="line">  &#123; <span class="comment">// Crisis Center child route</span></div><div class="line">    path: <span class="string">'/crisis-center/...'</span>,</div><div class="line">    name: <span class="string">'CrisisCenter'</span>,</div><div class="line">    component: CrisisCenterComponent,</div><div class="line">    useAsDefault: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  &#123;path: <span class="string">'/heroes'</span>,   name: <span class="string">'Heroes'</span>,     component: HeroListComponent&#125;,</div><div class="line">  &#123;path: <span class="string">'/hero/:id'</span>, name: <span class="string">'HeroDetail'</span>, component: HeroDetailComponent&#125;,</div><div class="line">  &#123;path: <span class="string">'/disaster'</span>, name: <span class="string">'Asteroid'</span>, redirectTo: [<span class="string">'CrisisCenter'</span>, <span class="string">'CrisisDetail'</span>, &#123;id:<span class="number">3</span>&#125;]&#125;</div><div class="line">])</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123; &#125;</div></pre></td></tr></table></figure>
<p>上述代码我们干了几件事：</p>
<ol>
<li>写了一个组件，包含一个<code>h1</code>，一个<code>nav</code>里面包含两个<code>a</code>，还有一个<code>router-outlet</code>组件</li>
<li>注入了两个服务，<code>DialogService</code>, <code>HeroService</code>（这一步不属于路由构建步骤）</li>
<li>注入了一个指令，<code>ROUTER_DIRECTIVES</code></li>
<li>使用<code>@RouteConfig</code>，配置子路径和对应的子组件，当/crisis-center/时候，在<code>router-outlet</code>中显示<code>CrisisCenterComponent</code>组件，当/heroes时候，在<code>router-outlet</code>中显示<code>HeroListComponent</code>组件，以此类推</li>
<li>当导航到/disaster，重定向到<code>CrisisCenter</code>的<code>CrisisDetail</code>视图。<code>CrisisCenter</code>, <code>CrisisDetail</code>是父子视图关系，下面会讲到。</li>
<li>导出这个组件</li>
</ol>
<p>好了我们的带有路由的组件编写好了，其实就是个可以切换视图的组件而已，就是这么简单。我们在浏览器中运行程序，点击<code>nav</code>中的heroes，就可以把子视图<code>Heroes</code>渲染出来了。</p>
<p><img src="https://ws1.sinaimg.cn/large/83900b4egw1f9xkkfld1kj20az0cg3zh.jpg" alt=""></p>
<p>浏览器路径变为</p>
<p><a href="http://localhost:63342/angular2-tutorial/router/index.html/heroes" target="_blank" rel="external">http://localhost:63342/angular2-tutorial/router/index.html/heroes</a></p>
<p>在原有的基础上加上了/heroes。</p>
<h2 id="温习promise"><a href="#温习promise" class="headerlink" title="温习promise"></a>温习promise</h2><p>当我们导航到heroes视图的时候，我们就进入了另一个子组件，这个组件需要一个heroes服务，里面用到了Promise，我们在<a href="https://lewis617.github.io/2016/02/28/ng2-service/">Angular2系列教程（七）Injectable、Promise、Interface、使用服务</a>讲过Promise，然我们来温习Promise：</p>
<p>app/heroes/hero.service.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> Hero &#123;</div><div class="line">  <span class="keyword">constructor</span>(public id: number, public name: string) &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroService &#123;</div><div class="line">  getHeroes() &#123; <span class="keyword">return</span> heroesPromise; &#125;</div><div class="line"></div><div class="line">  getHero(id: <span class="built_in">number</span> | <span class="built_in">string</span>) &#123;</div><div class="line">    <span class="keyword">return</span> heroesPromise</div><div class="line">      .then(heroes =&gt; heroes.filter(h =&gt; h.id === +id)[<span class="number">0</span>]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> HEROES = [</div><div class="line">    <span class="keyword">new</span> Hero(<span class="number">11</span>, <span class="string">'Mr. Nice'</span>),</div><div class="line">    <span class="keyword">new</span> Hero(<span class="number">12</span>, <span class="string">'Narco'</span>),</div><div class="line">    <span class="keyword">new</span> Hero(<span class="number">13</span>, <span class="string">'Bombasto'</span>),</div><div class="line">    <span class="keyword">new</span> Hero(<span class="number">14</span>, <span class="string">'Celeritas'</span>),</div><div class="line">    <span class="keyword">new</span> Hero(<span class="number">15</span>, <span class="string">'Magneta'</span>),</div><div class="line">    <span class="keyword">new</span> Hero(<span class="number">16</span>, <span class="string">'RubberMan'</span>)</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">var</span> heroesPromise = Promise.resolve(HEROES);</div></pre></td></tr></table></figure>
<p>以上代码我们干了几件事：</p>
<ol>
<li>写了一个<code>Hero</code>类</li>
<li><p>写了一个<code>HeroService</code>类，包含两个成员函数</p>
</li>
<li><p>写了一个数组<code>HEROES</code>，里面每一项都是一个<code>hero</code>类的实例，也就是个对象（引用类型）</p>
</li>
<li>定义了一个<code>heroesPromise</code>，将<code>value</code>设为数组<code>HEROES</code>，状态为<code>resolved</code>，随时可以使用<code>then</code>来获取<code>value</code>，也就是数组<code>HEROES</code></li>
</ol>
<p>温习Promise，Promise的两种构建方法：</p>
<ol>
<li><code>Promise.resolve()</code></li>
<li><code>new Promise()</code>，里面是个function，该function的参数是resolve和reject。</li>
</ol>
<p>例子（chrome console）：</p>
<p><img src="https://ws2.sinaimg.cn/large/83900b4egw1f9xkkfarv9j20k602l74v.jpg" alt=""></p>
<p>更详细的的用法，可以看我之前讲的Promise：<a href="https://lewis617.github.io/2016/02/28/ng2-service/">Angular2系列教程（七）Injectable、Promise、Interface、使用服务</a> 。</p>
<h2 id="两个服务：Router、RouteParams"><a href="#两个服务：Router、RouteParams" class="headerlink" title="两个服务：Router、RouteParams"></a>两个服务：Router、RouteParams</h2><p>我们的英雄服务写好了，然我们继续看英雄列表组件，当我们想要点击列表的某一项的时候，我们需要一个参数来导航到指定的英雄详情视图，这时候我们就需要<code>RouteParams</code>了，导航这个动作出发则需要<code>Router</code>服务：</p>
<p>app/heroes/hero-list.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line"></div><div class="line"><span class="comment">// TODO SOMEDAY: Feature Componetized like CrisisCenter</span></div><div class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125;   from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Hero, HeroService&#125;   from <span class="string">'./hero.service'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Router, RouteParams&#125; from <span class="string">'angular2/router'</span>;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">  template: <span class="string">`</span></div><div class="line">    &lt;h2&gt;HEROES&lt;/h2&gt;</div><div class="line">    &lt;ul class="items"&gt;</div><div class="line">      &lt;li *ngFor="#hero of heroes"</div><div class="line">        [class.selected]="isSelected(hero)"</div><div class="line">        (click)="onSelect(hero)"&gt;</div><div class="line">        &lt;span class="badge"&gt;&#123;&#123;hero.id&#125;&#125;&lt;/span&gt; &#123;&#123;hero.name&#125;&#125;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  `</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroListComponent <span class="keyword">implements</span> OnInit &#123;</div><div class="line">  heroes: Hero[];</div><div class="line"></div><div class="line">  <span class="keyword">private</span> _selectedId: <span class="built_in">number</span>;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(</div><div class="line">    private _service: HeroService,</div><div class="line">    private _router: Router,</div><div class="line">    routeParams: RouteParams) &#123;</div><div class="line">      <span class="keyword">this</span>._selectedId = +routeParams.get(<span class="string">'id'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  isSelected(hero: Hero) &#123; <span class="keyword">return</span> hero.id === <span class="keyword">this</span>._selectedId; &#125;</div><div class="line"></div><div class="line">  onSelect(hero: Hero) &#123;</div><div class="line">    <span class="keyword">this</span>._router.navigate( [<span class="string">'HeroDetail'</span>, &#123; id: hero.id &#125;] );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ngOnInit() &#123;</div><div class="line">    <span class="keyword">this</span>._service.getHeroes().then(heroes =&gt; <span class="keyword">this</span>.heroes = heroes)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码，我们干了几件事：</p>
<ol>
<li>渲染一个组件，包括一个列表</li>
<li>在构造函数中，将英雄服务<code>HeroService</code>、路由服务<code>Router</code>、路由参数<code>RouteParams</code>传给私有变量</li>
<li>写了三个成员函数用于处理相应的业务逻辑</li>
<li>其中<code>this._router.navigate( [&#39;HeroDetail&#39;, { id: hero.id }] );</code>将<code>app</code>导航到了<code>HeroDetail</code>视图，并带上<code>id</code>参数</li>
<li>其中<code>this._service.getHeroes().then(heroes =&amp;gt; this.heroes = heroes)</code>，用于获取刚才的<code>heroes</code>数组，并将其传给<code>this.heroes</code></li>
</ol>
<p><code>Router</code>服务的使用：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>._router.navigate( [<span class="string">'HeroDetail'</span>, &#123; id: hero.id &#125;] );</div></pre></td></tr></table></figure>
<p><code>RouteParams</code>服务的使用：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>._selectedId = +routeParams.get(<span class="string">'id'</span>);</div></pre></td></tr></table></figure>
<p>其中<code>routeParams.get(&#39;id&#39;)</code>前面那个<code>+</code>代表将其转换为数字类型。</p>
<p><code>HeroService</code>服务的使用：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>._service.getHeroes().then(heroes =&gt;; <span class="keyword">this</span>.heroes = heroes)</div></pre></td></tr></table></figure>
<h2 id="引用类型和单例模式的妙用"><a href="#引用类型和单例模式的妙用" class="headerlink" title="引用类型和单例模式的妙用"></a>引用类型和单例模式的妙用</h2><p>我们继续看英雄详细视图：</p>
<p>app/heroes/hero-detail.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component,  OnInit&#125;  from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Hero, HeroService&#125;   from <span class="string">'./hero.service'</span>;</div><div class="line"><span class="keyword">import</span> &#123;RouteParams, Router&#125; from <span class="string">'angular2/router'</span>;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">  template: <span class="string">`</span></div><div class="line">  &lt;h2&gt;HEROES&lt;/h2&gt;</div><div class="line">  &lt;div *ngIf="hero"&gt;</div><div class="line">    &lt;h3&gt;"&#123;&#123;hero.name&#125;&#125;"&lt;/h3&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;label&gt;Id: &lt;/label&gt;&#123;&#123;hero.id&#125;&#125;&lt;/div&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;label&gt;Name: &lt;/label&gt;</div><div class="line">      &lt;input [(ngModel)]="hero.name" placeholder="name"/&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;p&gt;</div><div class="line">      &lt;button (click)="gotoHeroes()"&gt;Back&lt;/button&gt;</div><div class="line">    &lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  `,</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroDetailComponent <span class="keyword">implements</span> OnInit  &#123;</div><div class="line">  hero: Hero;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(</div><div class="line">    private _router:Router,</div><div class="line">    private _routeParams:RouteParams,</div><div class="line">    private _service:HeroService)&#123;&#125;</div><div class="line"></div><div class="line">  ngOnInit() &#123;</div><div class="line">    <span class="keyword">let</span> id = <span class="keyword">this</span>._routeParams.get(<span class="string">'id'</span>);</div><div class="line">    <span class="keyword">this</span>._service.getHero(id).then(hero =&gt; <span class="keyword">this</span>.hero = hero);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  gotoHeroes() &#123;</div><div class="line">    <span class="keyword">let</span> heroId = <span class="keyword">this</span>.hero ? <span class="keyword">this</span>.hero.id : <span class="literal">null</span>;</div><div class="line">    <span class="comment">// Pass along the hero id if available</span></div><div class="line">    <span class="comment">// so that the HeroList component can select that hero.</span></div><div class="line">    <span class="comment">// Add a totally useless `foo` parameter for kicks.</span></div><div class="line">    <span class="keyword">this</span>._router.navigate([<span class="string">'Heroes'</span>,  &#123;id: heroId, foo: <span class="string">'foo'</span>&#125; ]);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码，我们仅仅是获取指定的英雄信息，并渲染出来。那么修改英雄信息是如何实现的呢？就是通过引用类型实现的。</p>
<p>我们知道，在js中，对象和数组是引用类型，也就意味着，当我们将某个对象传给别的变量的时候，仅仅是将对象的地址传给了那个变量，当我们修改那个变量时候，其实对象也被修改了。<br>在这个程序中，我们将<code>hero</code>对象传给<code>this.hero</code>，并将其双向数据绑定到<code>input</code>上：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input [(ngModel)]=<span class="string">"hero.name"</span> placeholder=<span class="string">"name"</span>/&gt;</div></pre></td></tr></table></figure>
<p>这样当我们改变<code>input</code>的值的时候，<code>this.hero</code>被改变，服务中的<code>hero</code>也被改变，因为是引用类型嘛，其实操作的都是一个对象。再有我们的服务是单例模式，所以全局的<code>hero</code>列表都被改变了。</p>
<p>让我们改变<code>input</code>的值，并点击back，我们发现英雄列表视图中的数据也被改变了，这就是引用类型和单例模式的妙用。</p>
<h2 id="Route-Parameters-or-Query-Parameters"><a href="#Route-Parameters-or-Query-Parameters" class="headerlink" title="Route Parameters or Query Parameters?"></a>Route Parameters or Query Parameters?</h2><p>当我们点击back返回时候，我们发现URL变成了：</p>
<p><a href="http://localhost:63342/angular2-tutorial/router/index.html/heroes?id=11&amp;foo=foo" target="_blank" rel="external">http://localhost:63342/angular2-tutorial/router/index.html/heroes?id=11&amp;foo=foo</a></p>
<p>也就是拥有了Query Parameters：<code>?id=11&amp;amp;foo=foo</code>。</p>
<p>为何会这样呢？因为我们指定了参数：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>._router.navigate([<span class="string">'Heroes'</span>, &#123;id: heroId, foo: <span class="string">'foo'</span>&#125;]);</div></pre></td></tr></table></figure>
<p>但是英雄列表视图有没有指定的<code>id</code>和<code>foo</code>的token，所以这两个变量是可选的，所以就自动生成了Query Parameters，好让我们进行select的css重绘。</p>
<p>在英雄详细视图中，我们使用了：<code>id</code>这个token。</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;path: <span class="string">'/hero/:id'</span>, name: <span class="string">'HeroDetail'</span>, component: HeroDetailComponent&#125;</div></pre></td></tr></table></figure>
<p>这就是Route Parameters。它是必须的，我们必须要指定id这个参数。这就是Route Parameters 和 Query Parameters的比较。</p>
<p>这节课我们先讲到这里，下节课我们通过”危机中心”这个例子，继续讲解路由，将包含路由的嵌套、路由的生命周期等众多炫酷功能！</p>
<hr>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/angular2-tutorial" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们要讲的是 ng2 的路由系统。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="https://lewis617.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Angular2系列教程（九）Jsonp、URLSearchParams、中断选择数据流</title>
    <link href="https://lewis617.github.io/2016/03/21/ng2-http-2/"/>
    <id>https://lewis617.github.io/2016/03/21/ng2-http-2/</id>
    <published>2016-03-21T00:54:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，今天我们要讲的是http模块的第二部分，主要学习ng2中Jsonp、URLSearchParams、observable中断选择数据流的用法。</p>
<a id="more"></a>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p><img src="https://ws1.sinaimg.cn/large/83900b4egw1f9xkroozusj20hl0mwgo5.jpg" alt=""></p>
<p>例子的第一个程序，上节课已经讲过了。这节课我们学习第二个程序，从wiki的api中跨域获取数据，可实现300毫秒内中断和选择最近请求等炫酷功能，这些功能都来自于observable！</p>
<p>运行方法：</p>
<p>在http目录或者上级目录起个服务即可：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http-server</div></pre></td></tr></table></figure>
<p>没有则需要安装http-server：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo  npm install http-server -g</div></pre></td></tr></table></figure>
<p>源代码：</p>
<p><a href="https://github.com/lewis617/angular2-tutorial/tree/gh-pages/http" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial/tree/gh-pages/http</a></p>
<p>demo演示：</p>
<p><a href="http://lewis617.github.io/angular2-tutorial/http">http://lewis617.github.io/angular2-tutorial/http</a></p>
<h1 id="Jsonp"><a href="#Jsonp" class="headerlink" title="Jsonp"></a>Jsonp</h1><p>在讲解observable的api前呢？我们还是把例子的代码给讲解完</p>
<p>app/wiki/wikipedia.service.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Jsonp, URLSearchParams&#125; from <span class="string">'angular2/http'</span>;</div><div class="line"></div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> WikipediaService &#123;</div><div class="line">  <span class="keyword">constructor</span>(private jsonp: Jsonp) &#123;&#125;</div><div class="line"></div><div class="line">  search (term: <span class="built_in">string</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> wikiUrl = <span class="string">'http://en.wikipedia.org/w/api.php'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> params = <span class="keyword">new</span> URLSearchParams();</div><div class="line">    params.set(<span class="string">'search'</span>, term); <span class="comment">// the user's search value</span></div><div class="line">    params.set(<span class="string">'action'</span>, <span class="string">'opensearch'</span>);</div><div class="line">    params.set(<span class="string">'format'</span>, <span class="string">'json'</span>);</div><div class="line">    params.set(<span class="string">'callback'</span>, <span class="string">'JSONP_CALLBACK'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Add error handling</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.jsonp</div><div class="line">               .get(wikiUrl, &#123; search: params &#125;)</div><div class="line">               .map(request =&gt; &lt;<span class="built_in">string</span>[]&gt; request.json()[<span class="number">1</span>]);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码我们干了几件事：</p>
<ol>
<li>导入需要的api</li>
<li>写一个使用<code>Injectable</code>装饰的类（服务）</li>
<li>在构造函数中注入<code>Jsonp</code>服务</li>
<li>编写<code>search</code>成员函数实现获取数据的功能</li>
</ol>
<p>这个<code>jsonp</code>服务从何而来？来自</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;JSONP_PROVIDERS&#125; from <span class="string">'angular2/http'</span>;</div></pre></td></tr></table></figure>
<p>我们将其注入在组件中：</p>
<p>app/wiki/wiki.component.ts和app/wiki/wiki-smart.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">providers:[JSONP_PROVIDERS, WikipediaService]</div></pre></td></tr></table></figure>
<p>这样组件中的服务就可以用了！</p>
<h1 id="URLSearchParams"><a href="#URLSearchParams" class="headerlink" title="URLSearchParams"></a>URLSearchParams</h1><p>然后我们发现我们从</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Jsonp, URLSearchParams&#125; from <span class="string">'angular2/http'</span>;</div></pre></td></tr></table></figure>
<p>http中引入了另一个api，<code>URLSearchParams</code>。</p>
<p>这是什么？用来干嘛？qs大家一定非常熟悉，就是url后面那个 <code>？</code>和 <code>&amp;</code> 。我们的程序也可以这样写：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line"><span class="keyword">let</span> queryString =</div><div class="line">  <span class="string">`?search=<span class="subst">$&#123;term&#125;</span>&amp;action=opensearch&amp;format=json&amp;callback=JSONP_CALLBACK`</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.jsonp</div><div class="line">           .get(wikiUrl + queryString)</div><div class="line">           .map(request =&gt; &lt;<span class="built_in">string</span>[]&gt; request.json()[<span class="number">1</span>]);</div></pre></td></tr></table></figure>
<p><code>URLSearchParams</code>，可以将qs写成对象，通过调用对象的方法来获取设置其参数，然后给ng2用！像这样需要对象嵌套对象的时候，<code>URLSearchParams</code>就显得非常方便！</p>
<h1 id="简单监听数据流"><a href="#简单监听数据流" class="headerlink" title="简单监听数据流"></a>简单监听数据流</h1><p>服务写好了，然后我们在组件中调用服务来请求数据吧！首先来个简单的，即每次输入都会发请求：</p>
<p>app/wiki/wiki.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">items: Observable&lt;<span class="built_in">string</span>[]&gt;;</div><div class="line"></div><div class="line">search (term: <span class="built_in">string</span>) &#123;</div><div class="line">  <span class="keyword">this</span>.items = <span class="keyword">this</span>._wikipediaService.search(term);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在组件的类中定义了一个<code>items</code>，类型是Observable。然后又写了一个成员函数<code>search</code>用于调用服务获取数据。非常简单，输入的数据在<code>term</code>变量中，被源源不断的输入到服务里面，服务通过调用api，源源不断的返回数据流给observable，我们拿到observable后将其传给<code>items</code>这个observable，然后在模板中渲染出来！</p>
<p>app/wiki/wiki.component.ts</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;input #term (keyup)="search(term.value)"/&gt;</div><div class="line"></div><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li *ngFor="#item of items | async"&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p><code>async</code>这个过滤器之前已经讲过不再赘述！</p>
<h1 id="中断数据流，选择数据流"><a href="#中断数据流，选择数据流" class="headerlink" title="中断数据流，选择数据流"></a>中断数据流，选择数据流</h1><p>让我们来实现更炫酷的功能吧！我们希望不要每个字符输入都请求服务器，我们希望300毫秒以内的字符输入都被中断掉！使用observable就对了，promise可没有这么炫酷的功能！</p>
<p>app/wiki/wiki-smart.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> _searchTermStream = <span class="keyword">new</span> Subject&lt;<span class="built_in">string</span>&gt;();</div><div class="line"></div><div class="line"> search(term:<span class="built_in">string</span>) &#123; <span class="keyword">this</span>._searchTermStream.next(term); &#125;</div><div class="line"></div><div class="line"> items:Observable&lt;<span class="built_in">string</span>[]&gt; = <span class="keyword">this</span>._searchTermStream</div><div class="line">   .debounceTime(<span class="number">300</span>)</div><div class="line">   .distinctUntilChanged()</div><div class="line">   .switchMap((term:<span class="built_in">string</span>) =&gt; <span class="keyword">this</span>._wikipediaService.search(term));</div></pre></td></tr></table></figure>
<p>我们在上一个简单的程序基础上增加了一个成员变量<code>searchTermStream</code>，是个<code>Subject</code>类型，这是什么鬼？这是<a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/subjects.md" target="_blank" rel="external">官方文档。</a></p>
<p>简单来说，<code>Subject</code>就是用来创建流的，每次我们输入字符，都可以使用<code>searchTermStream</code>的next方法将字符源源不断的添加到<code>searchTermStream</code>中。</p>
<p>然而这个<code>searchTermStream</code>同时也是observable，我们可以使用<code>debounceTime</code>这个api将数据流的流动频率控制在300毫秒以上，这意味着300毫秒以内输入多次也只能发出一次。</p>
<p><a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/debounce.md" target="_blank" rel="external">https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/debounce.md</a></p>
<p>接着我们使用了<code>distinctUntilChanged</code>这个api用于中断没有改变的情况，比如一个用户先输入”angular”，然后不小心输入了”angularrrrr”，接着他立马按回格键，变成了”angular”，两次都是”angular”，没有发生改变，就会被<code>distinctUntilChanged</code>这个api给中断掉！promise可没有中断功能！非常炫酷！</p>
<p><a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/distinctuntilchanged.md" target="_blank" rel="external">https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/distinctuntilchanged.md</a></p>
<p>好吧，还有更加炫酷的api。我们甚至可以选择最近的一次数据流。使用<code>switchMap</code>就可以做到，新版本被更换成了<a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/flatmaplatest.md" target="_blank" rel="external">flatmaplatest</a>，顾名思义就是选择最后的项，这里指的是最近的请求！</p>
<p><a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/flatmaplatest.md" target="_blank" rel="external">https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/flatmaplatest.md</a></p>
<p>observable的api太多了，大家需要可以查询，不再一一讲述：</p>
<p><a href="https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators" target="_blank" rel="external">https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators</a></p>
<hr>
<h1 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h1><p><a href="https://github.com/lewis617/angular2-tutorial" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，今天我们要讲的是http模块的第二部分，主要学习ng2中Jsonp、URLSearchParams、observable中断选择数据流的用法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="https://lewis617.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Angular2系列教程（八）In-memory web api、HTTP服务、依赖注入、Observable</title>
    <link href="https://lewis617.github.io/2016/03/20/ng2-http-1/"/>
    <id>https://lewis617.github.io/2016/03/20/ng2-http-1/</id>
    <published>2016-03-20T23:30:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p> 大家好，今天我们要讲是ng2的http功能模块，这个功能模块的代码不在ng2里面，需要我们另外引入：</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/http.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://ws3.sinaimg.cn/large/83900b4egw1f9xmuxndz8j20hl0mwgo5.jpg" alt=""></p>
<p>这是官网的例子，包含两个程序：</p>
<ol>
<li>英雄列表</li>
<li>wiki关键词</li>
</ol>
<p>第一个程序可以实现http的get请求，获取英雄列表，也可以实现http的post请求，新增英雄。</p>
<p>第二个程序可以实现输入关键字即时获取wiki的包含该关键字的名词列表，第一个是每输一个字符都会请求，第二个时只有停顿够300毫秒才会发出请求。两个都使用了jsonp的跨域方法。</p>
<p>运行方法：</p>
<p>在http目录或者上级目录起个服务即可：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http-server</div></pre></td></tr></table></figure>
<p>没有则需要安装http-server：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo  npm install http-server -g</div></pre></td></tr></table></figure>
<p>源代码：</p>
<p><a href="https://github.com/lewis617/angular2-tutorial/tree/gh-pages/http" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial/tree/gh-pages/http</a></p>
<p>demo演示：</p>
<p><a href="http://lewis617.github.io/angular2-tutorial/http">http://lewis617.github.io/angular2-tutorial/http</a></p>
<h2 id="In-memory-web-api"><a href="#In-memory-web-api" class="headerlink" title="In-memory web api"></a>In-memory web api</h2><p>首先我们先来看第一个程序，英雄列表。在运行这个程序前，我们需要学习一个库，<a href="https://github.com/wardbell/a2-in-memory-web-api" target="_blank" rel="external">a2-in-memory-web-api</a>  。</p>
<p>这个库的功能是可以帮助你在ng2里面虚拟api，不用你写api后台了，方便测试。顾名思义，这个库所虚拟的api在内存中，也就意味着你刷新浏览器后，所有的数据都会消失！好，让我们来学习如何使用！  </p>
<p>第一步，你需要引入这个库：</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/web-api.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后，我们要使用这个库给我们封装好的服务：</p>
<p>app/toh/toh.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// in-memory web api providers</span></div><div class="line">provide(XHRBackend, &#123; useClass: InMemoryBackendService &#125;), <span class="comment">// in-mem server</span></div><div class="line">provide(SEED_DATA,  &#123; useClass: HeroData &#125;) <span class="comment">// in-mem server data</span></div></pre></td></tr></table></figure>
<p><code>XHRBackend</code>和<code>SEED_DATA</code>是服务里面提供的变量，我们需要设置。<code>XHRBackend</code>使用<code>InMemoryBackendService</code>来创建provider，<code>SEED_DATA</code>使用我们自己写的<code>HeroData</code>来创建provider，作用是初始化数据。我们来看<code>HeroData</code>的代码：</p>
<p>app/hero-data.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroData &#123;</div><div class="line">  createDb() &#123;</div><div class="line">    <span class="keyword">let</span> heroes = [</div><div class="line">      &#123; <span class="string">"id"</span>: <span class="string">"1"</span>, <span class="string">"name"</span>: <span class="string">"Windstorm"</span> &#125;,</div><div class="line">      &#123; <span class="string">"id"</span>: <span class="string">"2"</span>, <span class="string">"name"</span>: <span class="string">"Bombasto"</span> &#125;,</div><div class="line">      &#123; <span class="string">"id"</span>: <span class="string">"3"</span>, <span class="string">"name"</span>: <span class="string">"Magneta"</span> &#125;,</div><div class="line">      &#123; <span class="string">"id"</span>: <span class="string">"4"</span>, <span class="string">"name"</span>: <span class="string">"Tornado"</span> &#125;</div><div class="line">    ];</div><div class="line">    <span class="keyword">return</span> &#123;heroes&#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那个<code>createDB</code>是webapi里提供的方法用于创建虚拟的数据库。</p>
<p>那么什么是provider？<del>provider就是服务，provide是ng2给我们提供的创建服务的api</del>，这个可以参考官网，比较简单不再赘述：</p>
<p><del><a href="https://angular.io/docs/ts/latest/api/core/provide-function.html" target="_blank" rel="external">https://angular.io/docs/ts/latest/api/core/provide-function.html</a></del></p>
<p>provider 是依赖注入中的一个概念，它决定了服务的实例化方式。<br>到此为止，我们的虚拟api就配置好了，我们可以在<code>app/heroes</code>这个url上进行get和post请求，用于获取和新增数据了。为什么是这个url？因为我们在创建数据库时候定义了这个节点：</p>
<p>app/hero-data.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;heroes&#125;;</div></pre></td></tr></table></figure>
<p>你可以将其改变为<code>heroes1</code>或者<code>heroes2</code>来测试下。</p>
<h2 id="使用HTTP服务"><a href="#使用HTTP服务" class="headerlink" title="使用HTTP服务"></a>使用HTTP服务</h2><p>api虚拟好了，我们开始调用api，如何调用呢？我需要使用ng2给我们提供的http服务。这个服务需要额外http库文件，它不在ng2的库文件中。因为官方考虑到大家伙可能想使用别的http库吧！</p>
<p>我们先引入js文件：</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/http.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 然后注入服务：</p>
<p>app/toh/toh.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HTTP_PROVIDERS,</div></pre></td></tr></table></figure>
<p>然后就可以在这个组建下层的服务中使用HTTP了：</p>
<p>app/toh/hero.service.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroService &#123;</div><div class="line">  <span class="keyword">constructor</span> (private http: Http) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>app/toh/hero.service.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.http.get(<span class="keyword">this</span>._heroesUrl)</div></pre></td></tr></table></figure>
<p>app/toh/hero.service.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.http.post(<span class="keyword">this</span>._heroesUrl, body, options)</div></pre></td></tr></table></figure>
<h2 id="ng2的依赖注入"><a href="#ng2的依赖注入" class="headerlink" title="ng2的依赖注入"></a>ng2的依赖注入</h2><p>刚才提到了http服务的注入。我们就来聊聊”依赖注入”。</p>
<p>ng1里面的依赖注入被保留到ng2里面了，什么是依赖注入，为什么要用依赖注入，依赖注入和规则是什么样的？</p>
<p><del>依赖注入类似于import、require，可以将我们封装好的模块注入另一个模块，成为其依赖。</del></p>
<p><del>这样做有什么好处？代码复用度高，模块相互独立，管理清晰。</del></p>
<p><del>依赖注入的规则是什么？</del></p>
<p>  <del>1. 注入组件指令：只能在当前组件用，当前组件的父子组件都不能用！</del><br>  <del>2. 注入服务：可以给当前组件和其所有的子组件用！</del></p>
<p>依赖注入是一种编程模式，该模式可以让一个类从外部源中获得它的依赖，而不必亲自创建它们。</p>
<p>依赖注入的规则是什么？</p>
<ol>
<li>NgModule 中的服务是被注册到根注入器的。这意味着任何注册到 NgModule 上的服务都可以被整个应用访问到。</li>
<li>另一方面，注册到应用组件上的只在该组件及其各级子组件中可用。</li>
</ol>
<p>有一个很有趣的问题：我们是否应该将所有服务都放在顶层？什么时候我们需要将其注入子组件中呢？</p>
<p>当每个组件需要独立的服务实例时候！</p>
<p>服务是单例模式，也就意味着我们所编写的服务只能被实例化为一个对象，如果我们将服务注入在顶层，那么我们无法享受独立的服务。比如如果你要给”英雄列表”的每一项添加编辑功能，那么”编辑”这个服务就不能放在顶层，需要放在每个英雄列表的组件上。这样才能保证每个英雄列表拥有独立的服务（比如独立的当前名称属性等）。</p>
<p>放在顶层的服务也很多比如，提供方法的工具库如HTTP等都可以放在顶层，我们不需要多例。还有一些用于共享数据的服务更应该放在顶层，我们需要”单例模式”来帮助我们统一共享数据！</p>
<h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a><strong>Observable</strong></h2><p>刚才我们进行了http请求，不过我们发现，我们接着使用了<code>map()</code>这个方法：</p>
<p>app/toh/hero.service.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.http.get(<span class="keyword">this</span>._heroesUrl)  </div><div class="line">         .map(res =&gt; &lt;Hero[]&gt; res.json().data)  </div><div class="line">         .do(data =&gt; <span class="built_in">console</span>.log(data)) <span class="comment">// eyeball results in the console</span></div></pre></td></tr></table></figure>
<p>一般情况，我们这里都会返回一个Promise，然后我们使用<code>then</code>来处理数据。不过这里使用了<code>map()</code>，很显然，这里不是Promise而是Observable！</p>
<p>它来自于Rx.js，可以帮助我们实现响应式编程，处理异步的另一套解决方案（promise也是一套解决方案）。</p>
<p>这是十分复杂的概念，不过我会多罗嗦几句，所以不用担心。首先我们先来看Observable 和Promise的区别：</p>
<ol>
<li>Observable 可以处理多个事件，Promise则通常处理一个事件</li>
<li>Observable 可以终止，Promise则不能</li>
</ol>
<p>我们继续解读代码，讲完你就会明白这两个区别。</p>
<p><code>this.http.get(this._heroesUrl)</code>就返回了一个Obeservable，我们可以使用<code>map()</code>方法处理事件，和数组一样，你也可以使用<code>filter</code>。所以我们说observable可以处理多个事件。</p>
<p>这里的多个事件指的是什么呢？其实就是你输入的”英雄名称”，先后输入很多次，输入的名字如同流水一般进入我们程序中，我们使用observable来处理这个”流”。假如你前后就输入一次英雄名称并点击添加，那么这个流其实就一个事件。</p>
<p>observable定义完是不会执行的！直到你使用<code>subscribe</code>：</p>
<p>app/toh/hero-list.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>._heroService.getHeroes()</div><div class="line">         .subscribe(</div><div class="line">           heroes =&gt; <span class="keyword">this</span>.heroes = heroes,</div><div class="line">           error =&gt;  <span class="keyword">this</span>.errorMessage = &lt;<span class="built_in">any</span>&gt;error</div><div class="line">         );</div></pre></td></tr></table></figure>
<p>现在我们提到了很多observable的api，让我们总结下，后面还要补充：</p>
<ol>
<li><code>map()</code>：遍历流</li>
<li><code>filter()</code>：过滤流</li>
<li><code>do()</code>：监视流（通常打个console而已）</li>
<li><code>catch()</code>：捕获异常</li>
<li><code>subscribe()</code>：订阅流（即执行）</li>
</ol>
<p>到此为止，http的第一个程序”英雄列表”就可以运行了。这节课我们先讲到这里，下节课我们继续讲解observable中更加炫酷的api用法！</p>
<hr>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/angular2-tutorial" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 大家好，今天我们要讲是ng2的http功能模块，这个功能模块的代码不在ng2里面，需要我们另外引入：&lt;/p&gt;
&lt;p&gt;index.html&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;lib/http.dev.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="https://lewis617.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Angular2系列教程（七）Injectable、Promise、Interface、使用服务</title>
    <link href="https://lewis617.github.io/2016/02/28/ng2-service/"/>
    <id>https://lewis617.github.io/2016/02/28/ng2-service/</id>
    <published>2016-02-28T21:29:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们要讲的ng2的service这个概念，和ng1一样，service通常用于发送http请求，但其实你可以在里面封装任何你想封装的方法，有时候控制器之间的通讯也是依靠service来完成的，让我们一睹为快！</p>
<a id="more"></a>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>例子是官方的例子，加载一个英雄列表，点击显示详细信息。我直接放在我们的升级后的装备里面。</p>
<p><img src="https://ws1.sinaimg.cn/large/83900b4egw1f9xnap2tp0j20700k8abd.jpg" alt=""></p>
<p><a href="https://github.com/lewis617/angular2-tutorial/tree/gh-pages/service" target="_blank" rel="external">源代码</a></p>
<h1 id="Injectable"><a href="#Injectable" class="headerlink" title="Injectable"></a>Injectable</h1><p>在ng2里面如何编写服务呢？非常简单，你只需要写个类即可。那么这个<code>@Injectable()</code>是做什么的？其实单就这个例子来说，我们是不需要写个这个装饰的，因为我们的<code>HeroSerivce</code>没有依赖，如果你要写一个有依赖的服务，那么你需要加上这个<code>@Injectable()</code>，此处加上<code>@Injectable()</code>是可有可无的，但是写上是个好习惯。</p>
<p>app/hero.service.ts（部分代码）</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroService &#123;</div><div class="line">  getHeroes() &#123;</div><div class="line">    <span class="keyword">return</span> Promise.resolve(HEROES);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// See the "Take it slow" appendix</span></div><div class="line">  getHeroesSlowly() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise&lt;Hero[]&gt;(resolve =&gt;</div><div class="line">      setTimeout(() =&gt; resolve(HEROES), <span class="number">2000</span>) <span class="comment">// 2 seconds</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码我们干了哪些事儿呢？</p>
<ol>
<li>写了一个使用<code>injectable</code>装饰的类</li>
<li>写了两个成员函数</li>
<li>一个返回一个Promise，直接<code>resolve</code>数据</li>
<li>另一个也返回一个Promise，不过在两秒后<code>resolve</code>数据</li>
</ol>
<p>有的同学会问：<code>resolve</code>的数据哪去了？Promise是什么？我们继续讲解。</p>
<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>如果你玩过ng1，你一定对promise不陌生，因为我们经常在路由里面写<code>resolve</code>，这里就可以接受一个Promise对象。还有ng1中的<code>$q.defer()</code>等等。</p>
<p>但是promise并不是ng1的专利，你可以在你的任何javascript程序中使用promise，因为在ES6中已经原生提供<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">Promise对象</a>。你可以查看它的用法，这里我简单描述下：</p>
<ol>
<li>构造Promise，只需要在里面加入一个参数，这个参数是个function，这个function可以接受两个参数：<code>resolve</code>, <code>reject</code>。或者使用<code>Promise.resolve()</code>，不过这样没有延迟了。</li>
<li>使用Promise对象，最常用的方法是<code>then()</code>，里面接受一个function，这个function的参数为<code>resolve</code>的值。除了<code>then()</code>还有<code>catch()</code>等</li>
</ol>
<p>为了让大家能够清晰的了解Promise的用法，我们打开chrome的console：</p>
<p><img src="https://ws2.sinaimg.cn/large/83900b4egw1f9xnb0decnj20e103r3z7.jpg" alt=""></p>
<ol>
<li>输入Promise，是个function。</li>
<li>输入<code>Promise.resolve(&#39;123&#39;)</code>，我们得到一个状态为”已经解决”的promise。</li>
<li>输入<code>new Promise(resolve=&gt;;resolve(&#39;123&#39;))</code>，我们还是得到一个状态为”已经解决”的promise。</li>
</ol>
<p>2和3的区别在于，后者可以在参数的函数中做一些处理，比如延迟或者http请求。</p>
<p>然后让我们来看Promise的then方法：</p>
<p><img src="https://ws2.sinaimg.cn/large/83900b4egw1f9xnb0lqagj20ec035gm5.jpg" alt=""></p>
<ol>
<li>首先我们写了一个已经<code>resolved</code>的promise，并将其赋值给<code>p</code></li>
<li>然后使用<code>p.then()</code>，在回调函数里面打印参数，得到<code>&#39;123&#39;</code></li>
<li>最后<code>p.then()</code>整体返回的是个初始化（pending）的promise。</li>
</ol>
<p>现在我们明白一下这个代码中promise的用法了吧？</p>
<p>app/hero.service.ts（部分代码）</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroService &#123;</div><div class="line">  getHeroes() &#123;</div><div class="line">    <span class="keyword">return</span> Promise.resolve(HEROES);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// See the "Take it slow" appendix</span></div><div class="line">  getHeroesSlowly() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise&lt;Hero[]&gt;(resolve =&gt;</div><div class="line">      setTimeout(() =&gt; resolve(HEROES), <span class="number">2000</span>) <span class="comment">// 2 seconds</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么我们为何要使用promise呢？主要是为了解决回调地狱的问题。因为有了promise，你不必再写深层的回调，而是像极了同步的写法。</p>
<p>这是我的一个ng1的项目的<a href="https://github.com/lewis617/daily-task/blob/gh-pages/modules/login/ctrl.js" target="_blank" rel="external">部分代码</a>，用promise的<code>then()</code>来解决回调地狱。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">Auth.$createUser(&#123;<span class="attr">email</span>: email, <span class="attr">password</span>: pass&#125;)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// authenticate so we have permission to write to Firebase</span></div><div class="line">        <span class="keyword">return</span> Auth.$authWithPassword(&#123; <span class="attr">email</span>: email, <span class="attr">password</span>: pass &#125;);</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">        <span class="comment">// create a user profile in our data store</span></div><div class="line">        <span class="keyword">var</span> ref = wdutil.ref(<span class="string">'users'</span>, user.uid);</div><div class="line">        <span class="keyword">return</span> wdutil.handler(<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">            ref.set(&#123;<span class="attr">email</span>: email, <span class="attr">name</span>: $scope.name||firstPartOfEmail(email)&#125;, cb);</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="regexp">/* user */</span></span>) </span>&#123;</div><div class="line">        $scope.wait.show=<span class="literal">false</span>;</div><div class="line">        <span class="comment">// redirect to the account page</span></div><div class="line">        $location.path(<span class="string">'/account'</span>);</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        $scope.wait.show=<span class="literal">false</span>;</div><div class="line">        $scope.alerts.push(&#123;<span class="attr">type</span>:<span class="string">'danger'</span>,<span class="attr">msg</span>:wdutil.errMessage(err)&#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h1 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h1><p>在编写这个服务的过程中我们使用了interface这个概念，这个知识点属于ts的范畴，我们通常在接口中声明类型，有点像react中的propTypes：</p>
<p>app/hero.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Hero &#123;</div><div class="line">  id: <span class="built_in">number</span>;</div><div class="line">  name: <span class="built_in">string</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们在我们的服务中使用了这个接口：</p>
<p>app/hero.service.ts（部分代码）</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Hero&#125; from <span class="string">'./hero'</span>;</div></pre></td></tr></table></figure>
<p>app/hero.service.ts（部分代码）</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> Promise&lt;Hero[]&gt;(resolve =&gt;</div><div class="line">      setTimeout(() =&gt; resolve(HEROES), <span class="number">2000</span>) <span class="comment">// 2 seconds</span></div><div class="line">    );</div></pre></td></tr></table></figure>
<p>除此之外，我们在我们的组件里面也多次使用了这个接口：</p>
<p>app/app.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">heroes: Hero[];</div><div class="line">selectedHero: Hero;</div></pre></td></tr></table></figure>
<p>app/hero-detail.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroDetailComponent &#123;</div><div class="line">  hero: Hero;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此为止，我们的服务就算是写好了！</p>
<h1 id="使用服务"><a href="#使用服务" class="headerlink" title="使用服务"></a>使用服务</h1><p>让我们在组件中测试一下我们写好的服务吧：</p>
<p>app/app.component.ts（部分代码）</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line"><span class="keyword">import</span> &#123;HeroService&#125; from <span class="string">'./hero.service'</span>;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">providers: [HeroService]</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">constructor</span>(private _heroService: HeroService) &#123; &#125;</div><div class="line"></div><div class="line">  getHeroes() &#123;</div><div class="line">    <span class="keyword">this</span>._heroService.getHeroes().then(heroes =&gt; <span class="keyword">this</span>.heroes = heroes);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>以上代码我们干了这些事儿：</p>
<ol>
<li>利用模块系统导入这个服务类</li>
<li>在组件中注入这个服务</li>
<li>在构造函数中将这个服务赋给一个私有变量<code>_heroService</code></li>
<li>然后就可以尽情地在类中使用这个服务对象了<code>this._heroService</code></li>
</ol>
<p>这里的<code>getHeroes()</code>返回了一个Promise，所以我们可以使用<code>then</code>来处理接下来要发生的事。</p>
<hr>
<h1 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h1><p><a href="https://github.com/lewis617/angular2-tutorial" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们要讲的ng2的service这个概念，和ng1一样，service通常用于发送http请求，但其实你可以在里面封装任何你想封装的方法，有时候控制器之间的通讯也是依靠service来完成的，让我们一睹为快！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="https://lewis617.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Angular2系列教程（六）两种pipe：函数式编程与面向对象编程</title>
    <link href="https://lewis617.github.io/2016/02/24/ng2-pipe/"/>
    <id>https://lewis617.github.io/2016/02/24/ng2-pipe/</id>
    <published>2016-02-24T19:28:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我们要讲的是ng2的pipe这个知识点。</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://ws4.sinaimg.cn/large/83900b4egw1f9xnty3er1j20em06st9b.jpg" alt=""></p>
<p>这个例子包含两个pipe，<del>一个是stateful，一个是stateless</del>，是直接复制官方的例子。（最新的官网文档已经将其改为了pure和impure，并移除了面向对象的比喻，个人认为较为准确，请以最新的官网文档为参考！）</p>
<p><a href="https://github.com/lewis617/angular2-tutorial/tree/gh-pages/pipes" target="_blank" rel="external">源代码</a></p>
<h2 id="stateless-pipe"><a href="#stateless-pipe" class="headerlink" title="stateless pipe"></a>stateless pipe</h2><p>pipe就是ng1中的filter。先看看内建pipe吧：</p>
<ul>
<li><code>currency</code></li>
<li><code>date</code></li>
<li><code>uppercase</code></li>
<li><code>json</code></li>
<li><code>limitTo</code></li>
<li><code>lowercase</code></li>
<li><code>async</code></li>
<li><code>decimal</code></li>
<li><code>percent</code></li>
</ul>
<p>无需编写直接用！今天说了太多”直接用”哈哈！</p>
<p>pipe分为两种，一种是stateful，一种是stateless。我们先说stateless，stateless就是使用纯函数，不记住任何数据，也不会带来任何副作用。<code>DatePipe</code>就是stateless，我们再写个计算次方的pipe吧:</p>
<p>app/stateless/exponential-strength.pipe.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Pipe, PipeTransform&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * Raise the value exponentially</div><div class="line"> * Takes an exponent argument that defaults to 1.</div><div class="line"> * Usage:</div><div class="line"> *   value | exponentialStrength:exponent</div><div class="line"> * Example:</div><div class="line"> *   &#123;&#123; 2 |  exponentialStrength:10&#125;&#125;</div><div class="line"> *   formats to: 1024</div><div class="line">*/</div><div class="line">@Pipe(&#123;name: <span class="string">'exponentialStrength'</span>&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> ExponentialStrengthPipe <span class="keyword">implements</span> PipeTransform &#123;</div><div class="line">  transform(value: <span class="built_in">number</span>, args: <span class="built_in">string</span>[]) : <span class="built_in">any</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(value, <span class="built_in">parseInt</span>(args[<span class="number">0</span>] || <span class="string">'1'</span>, <span class="number">10</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很简单，计算某个值的某次方，比如2的10次方：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; <span class="number">2</span> | exponentialStrength:<span class="number">10</span>&#125;&#125;</div></pre></td></tr></table></figure>
<p>写个模板测试下：</p>
<p>app/stateless/power-booster.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;ExponentialStrengthPipe&#125; from <span class="string">'./exponential-strength.pipe'</span>;</div><div class="line">@Component(&#123;</div><div class="line">  selector: <span class="string">'power-booster'</span>,</div><div class="line">  template: <span class="string">`</span></div><div class="line">    &lt;h2&gt;Power Booster&lt;/h2&gt;</div><div class="line">    &lt;p&gt;</div><div class="line">      Super power boost: &#123;&#123;2 | exponentialStrength: 10&#125;&#125;</div><div class="line">    &lt;/p&gt;</div><div class="line">  `,</div><div class="line">  pipes: [ExponentialStrengthPipe]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> PowerBooster &#123; &#125;</div></pre></td></tr></table></figure>
<p>注入<code>pipes: [ExponentialStrengthPipe]</code>，然后直接用！</p>
<h2 id="stateful-pipe"><a href="#stateful-pipe" class="headerlink" title="stateful pipe"></a>stateful pipe</h2><p>先看一个stateful pipe的例子吧：</p>
<p>app/stateful/fetch-json.pipe.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> <span class="keyword">var</span> fetch;</div><div class="line"><span class="keyword">import</span> &#123;Pipe, PipeTransform&#125; from <span class="string">'angular2/core'</span>;</div><div class="line">@Pipe(&#123;</div><div class="line">  name: <span class="string">'fetch'</span>,</div><div class="line">  pure: <span class="literal">false</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> FetchJsonPipe  <span class="keyword">implements</span> PipeTransform &#123;</div><div class="line">  <span class="keyword">private</span> fetchedValue: <span class="built_in">any</span>;</div><div class="line">  <span class="keyword">private</span> fetchPromise: Promise&lt;<span class="built_in">any</span>&gt;;</div><div class="line">  transform(value: <span class="built_in">string</span>, args: <span class="built_in">string</span>[]): <span class="built_in">any</span> &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.fetchPromise) &#123;</div><div class="line">      <span class="keyword">this</span>.fetchPromise = fetch(value)</div><div class="line">        .then((result: <span class="built_in">any</span>) =&gt; result.json())</div><div class="line">        .then((json: <span class="built_in">any</span>)   =&gt; <span class="keyword">this</span>.fetchedValue = json);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fetchedValue;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们干了这些事：</p>
<ol>
<li>将<code>pure</code>参数设为<code>false</code></li>
<li>在成员函数<code>transform</code>中，执行<code>fetch</code>请求，将结果赋给<code>this.fetchedValue = json</code>，最后返回结果</li>
<li>如果<code>this.fetchPromise</code>这个成员变量已经被定义过，则直接返回成员变量<code>fetchedValue</code></li>
</ol>
<p>写个模板测试下：</p>
<p>app/stateful/hero-list.component.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;FetchJsonPipe&#125; from <span class="string">'./fetch-json.pipe'</span>;</div><div class="line">@Component(&#123;</div><div class="line">  selector: <span class="string">'hero-list'</span>,</div><div class="line">  template: <span class="string">`</span></div><div class="line">    &lt;h4&gt;Heroes from JSON File&lt;/h4&gt;</div><div class="line">    &lt;div *ngFor="#hero of ('/assets/heroes.json' | fetch) "&gt;</div><div class="line">      &#123;&#123;hero.name&#125;&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;p&gt;Heroes as JSON:</div><div class="line">    &#123;&#123;'/assets/heroes.json' | fetch | json&#125;&#125;</div><div class="line">    &lt;/p&gt;</div><div class="line">  `,</div><div class="line">  pipes: [FetchJsonPipe]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroListComponent &#123;</div><div class="line">  <span class="comment">/* I've got nothing to do ;-) */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>&#39;/assets/heroes.json&#39;</code>是我自己编写的json文件，放在了assets里面，因为这是webpack的静态文件地址。</p>
<p>结果：</p>
<p><img src="https://ws4.sinaimg.cn/large/83900b4egw1f9xntydj8rj20eq03y0t3.jpg" alt=""></p>
<h3 id="特性解读"><a href="#特性解读" class="headerlink" title="特性解读"></a>特性解读</h3><blockquote>
<p>Stateful pipes are conceptually similar to classes in object-oriented<br>programming. They can manage the data they transform. A pipe that creates an<br>HTTP request, stores the response and displays the output, is a stateful pipe.</p>
</blockquote>
<p>这是官方对statefule pipe的描述。说是能够创建http请求，存储响应，显示输出的pipe就是stateful pipe。那么stateless pipe不能做这些事吗？我好奇的在stateless pipe中尝试做http请求：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> <span class="keyword">var</span> fetch;</div><div class="line"><span class="keyword">import</span> &#123;Pipe, PipeTransform&#125; from <span class="string">'angular2/core'</span>;</div><div class="line">@Pipe(&#123;</div><div class="line">  name: <span class="string">'fetch'</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> FetchJsonPipe  <span class="keyword">implements</span> PipeTransform &#123;</div><div class="line">  transform(value: <span class="built_in">string</span>, args: <span class="built_in">string</span>[]): <span class="built_in">any</span> &#123;</div><div class="line">    fetch(value)</div><div class="line">        .then((result: <span class="built_in">any</span>) =&gt; result.json())</div><div class="line">        .then((json: <span class="built_in">any</span>)   =&gt;  json);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果什么都输出不了！说明当我们需要使用http的时候，或者处理异步的时候，需要使用stateful pipe。<del>这两个pipe的区别也正是”函数式编程”和”面向对象”的区别—-有无状态</del> （使用“有无状态“来区别函数式编程和面向对象编程不够准确！）。</p>
<hr>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/angular2-tutorial" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我们要讲的是ng2的pipe这个知识点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="https://lewis617.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Angular2系列教程（五）Structural directives、再谈组件生命周期</title>
    <link href="https://lewis617.github.io/2016/02/19/ng2-structural-directive/"/>
    <id>https://lewis617.github.io/2016/02/19/ng2-structural-directive/</id>
    <published>2016-02-19T01:11:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我们要讲的是structural directives和组件生命周期这两个知识点。structural directives顾名思义就是改变dom结构的指令。著名的内建结构指令有<a href="https://angular.io/docs/ts/latest/guide/template-syntax.html#ngIf" target="_blank" rel="external">ngIf</a>,<a href="https://angular.io/docs/ts/latest/guide/template-syntax.html#ngSwitch" target="_blank" rel="external">ngSwitch</a> 和<a href="https://angular.io/docs/ts/latest/guide/template-syntax.html#ngFor" target="_blank" rel="external">ngFor</a>。</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://ws2.sinaimg.cn/large/83900b4egw1f9xofl445fj20e30a4t9t.jpg" alt=""></p>
<p>例子是我自己改写的，编写一个structural directives，然后通过这个指令实例化和注销组件，在此同时监视组件生命周期。</p>
<p><a href="https://github.com/lewis617/angular2-tutorial/tree/gh-pages/lifecycle" target="_blank" rel="external">源代码</a></p>
<h2 id="UnlessDirective"><a href="#UnlessDirective" class="headerlink" title="UnlessDirective"></a>UnlessDirective</h2><p>这个指令是官网示例中的指令。</p>
<p>app/unless.directive.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Directive, Input&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;TemplateRef, ViewContainerRef&#125; from <span class="string">'angular2/core'</span>;</div><div class="line">@Directive(&#123; selector: <span class="string">'[myUnless]'</span> &#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> UnlessDirective &#123;</div><div class="line">  <span class="keyword">constructor</span>(</div><div class="line">    private _templateRef: TemplateRef,</div><div class="line">    private _viewContainer: ViewContainerRef</div><div class="line">    ) &#123; &#125;</div><div class="line">  @Input() <span class="keyword">set</span> myUnless(condition: <span class="built_in">boolean</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (!condition) &#123;</div><div class="line">      <span class="keyword">this</span>._viewContainer.createEmbeddedView(<span class="keyword">this</span>._templateRef);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">this</span>._viewContainer.clear();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过注入<code>TemplateRef</code>, <code>ViewContainerRef</code>这两个服务，来控制<code>template</code>的实例化和注销。<code>TemplateRef</code>可以让我们获取指令所在的元素的<code>template</code>，<code>ViewContainerRef</code>提供了多种视图容器的方法。</p>
<p>更详细的介绍：</p>
<ul>
<li><a href="https://angular.io/docs/ts/latest/api/core/TemplateRef-class.html" target="_blank" rel="external">TemplateRef</a></li>
<li><a href="https://angular.io/docs/ts/latest/api/core/ViewContainerRef-class.html" target="_blank" rel="external">ViewContainerRef</a></li>
</ul>
<h2 id="用于测试的组件"><a href="#用于测试的组件" class="headerlink" title="用于测试的组件"></a>用于测试的组件</h2><p>接下来我们编写一个用于测试的组件。</p>
<p>app/lifecycle.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component,Input&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;bootstrap&#125; from <span class="string">'angular2/platform/browser'</span>;</div><div class="line"><span class="keyword">import</span> &#123;OnChanges, SimpleChange,OnInit,AfterContentInit,AfterContentChecked,AfterViewInit,AfterViewChecked,OnDestroy&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">    selector: <span class="string">"lifecycle"</span>,</div><div class="line">    template: <span class="string">`</span></div><div class="line">    &lt;div&gt;</div><div class="line">    &lt;span&gt;&#123;&#123;name&#125;&#125;&lt;/span&gt;</div><div class="line">     &lt;button (click)="doSomething()"&gt;click and watch the lifecycle&lt;/button&gt;</div><div class="line">     &lt;/div&gt;</div><div class="line">    `</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> Lifecycle</div><div class="line"><span class="keyword">implements</span> OnChanges, OnInit,AfterContentInit,AfterContentChecked,AfterViewInit, AfterViewChecked, OnDestroy&#123;</div><div class="line">    @Input()</div><div class="line">    name:<span class="built_in">string</span></div><div class="line">    doSomething()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'***********doSomething**********'</span>);</div><div class="line">        setTimeout(()=&gt;&#123;</div><div class="line">             <span class="built_in">console</span>.log(<span class="string">'***********setTimeout**********'</span>);</div><div class="line">            <span class="keyword">this</span>.name=<span class="string">'susan'</span></div><div class="line">        &#125;,<span class="number">1000</span>)</div><div class="line">    &#125;</div><div class="line">    ngOnInit()&#123;<span class="built_in">console</span>.log(<span class="string">'onInit'</span>);&#125;</div><div class="line">    ngOnDestroy()&#123;<span class="built_in">console</span>.log(<span class="string">'OnDestroy'</span>)&#125;</div><div class="line">    ngOnChanges(changes: &#123;[propertyName: <span class="built_in">string</span>]: SimpleChange&#125;)&#123;<span class="built_in">console</span>.log(<span class="string">'ngOnChanges'</span>,changes)&#125;</div><div class="line">    ngAfterContentInit()&#123;<span class="built_in">console</span>.log(<span class="string">'AfterContentInit'</span>)&#125;</div><div class="line">    ngAfterContentChecked()&#123;<span class="built_in">console</span>.log(<span class="string">'AfterContentChecked'</span>)&#125;</div><div class="line">    ngAfterViewInit()&#123;<span class="built_in">console</span>.log(<span class="string">'AfterViewInit'</span>)&#125;</div><div class="line">    ngAfterViewChecked()&#123;<span class="built_in">console</span>.log(<span class="string">'AfterViewChecked'</span>)&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码我们做了这些事：</p>
<ol>
<li>渲染一个<code>span</code>一个<code>button</code></li>
<li>设置成员变量<code>name</code>,<code>@input</code>代表从<code>parent</code>输入</li>
<li>设置成员函数<code>doSomething</code>，打印一个信息，执行一个异步操作<code>setTimeout</code></li>
<li>继承接口，设置所有的生命周期钩子，并打印信息</li>
</ol>
<p>我们将使用这个组件，来监视组件生命周期。</p>
<h2 id="使用指令控制组件"><a href="#使用指令控制组件" class="headerlink" title="使用指令控制组件"></a>使用指令控制组件</h2><p>我们将我们的组件渲染出来，并用我们编写的结构指令”myunless”去实例化和注销这个组件</p>
<p>app/app.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;bootstrap&#125; from <span class="string">'angular2/platform/browser'</span>;</div><div class="line"><span class="keyword">import</span> &#123;UnlessDirective&#125;from <span class="string">'./unless.directive'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Lifecycle&#125; from <span class="string">'./lifecycle'</span></div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">    selector: <span class="string">"app"</span>,</div><div class="line">    directives:[UnlessDirective,Lifecycle],</div><div class="line">    template: <span class="string">`</span></div><div class="line">      &lt;button</div><div class="line">      (click)="condition = !condition"</div><div class="line">      [style.background] = "condition ? 'orangered': 'lightgreen'"</div><div class="line">      &gt;</div><div class="line">      Set 'condition' to &#123;&#123;condition ? 'False': 'True'&#125;&#125;</div><div class="line">      &lt;/button&gt;</div><div class="line"></div><div class="line">      &lt;lifecycle *myUnless="condition" name="lewis"&gt;&lt;/lifecycle&gt;</div><div class="line">    `</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bootstrap(App, [])</div><div class="line">    .catch(err =&gt; <span class="built_in">console</span>.error(err));</div></pre></td></tr></table></figure>
<p>这段代码我们干了这些事：</p>
<ol>
<li>注入组件和指令<code>directives:[UnlessDirective,Lifecycle]</code></li>
<li>渲染一个<code>button</code>控制成员变量<code>condition</code>的正负</li>
<li>渲染我们的组件<code>lifecycle</code>，并使用指令控制它的实例化和注销<code>&lt;lifecycle *myUnless=”condition” name=”lewis”&gt;&lt;/lifecycle&gt;</code></li>
<li>最后启动这个<code>app</code>组件<code>bootstrap(App, []) .catch(err =&gt; console.error(err));</code></li>
</ol>
<h2 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h2><h3 id="刷新页面："><a href="#刷新页面：" class="headerlink" title="刷新页面："></a>刷新页面：</h3><p><img src="https://ws4.sinaimg.cn/large/83900b4egw1f9xofnidzrj206l0b9jsf.jpg" alt=""></p>
<ol>
<li><code>onInit</code>是在组件第一次<code>ngOnChanges</code>时执行</li>
<li><code>OnChanges</code>在<code>input</code>和<code>output</code>绑定的值变化时候;我们可以看到打印了变化的值。可以替代ng1中的<code>$watch</code>;</li>
<li><code>AfterContentInit</code>、<code>AfterViewInit</code>分别代表在组件内容和视图初始化后执行。</li>
<li><code>AfterContentChecked</code>和<code>AfterViewChecked</code>是在组件内容和视图检查完后执行。</li>
</ol>
<p>这里没有<code>DoCheck</code>，因为接口没有证实。  </p>
<h3 id="点击Set-‘condition’-toTrue按钮，页面上的组件被注销"><a href="#点击Set-‘condition’-toTrue按钮，页面上的组件被注销" class="headerlink" title="点击Set ‘condition’ toTrue按钮，页面上的组件被注销"></a>点击Set ‘condition’ toTrue按钮，页面上的组件被注销</h3><p><img src="https://ws1.sinaimg.cn/large/83900b4egw1f9xoflcprrj207n036wed.jpg" alt=""></p>
<p>console打印：</p>
<p><img src="https://ws3.sinaimg.cn/large/83900b4egw1f9xofkn1oij206f00jjr5.jpg" alt=""></p>
<h3 id="点击Set-‘condition’-to-False按钮，页面上的组件重新被实例化："><a href="#点击Set-‘condition’-to-False按钮，页面上的组件重新被实例化：" class="headerlink" title="点击Set ‘condition’ to False按钮，页面上的组件重新被实例化："></a>点击Set ‘condition’ to False按钮，页面上的组件重新被实例化：</h3><p><img src="https://ws2.sinaimg.cn/large/83900b4egw1f9xofk3dwqj207q022t8q.jpg" alt=""></p>
<p>console打印：</p>
<p><img src="https://ws2.sinaimg.cn/large/83900b4egw1f9xofkozklj206d03laa5.jpg" alt=""></p>
<p>打印了一次<code>Onchanges</code>、<code>onInit</code>、<code>AfterContentInit</code>、<code>AfterViewInit</code>、<code>AfterContentChecked</code>和<code>AfterViewChecked</code>，说明组件实例化，只需要触发一轮初始化和变化检查。与刷新页面的五次对比，我们可以知道多余的”变化检查”，可能来源于angualr的启动。</p>
<h3 id="点击click-and-watch-the-lifecycle按钮，一秒后页面上的name变为susan："><a href="#点击click-and-watch-the-lifecycle按钮，一秒后页面上的name变为susan：" class="headerlink" title="点击click and watch the lifecycle按钮，一秒后页面上的name变为susan："></a>点击click and watch the lifecycle按钮，一秒后页面上的name变为susan：</h3><p><img src="https://ws1.sinaimg.cn/large/83900b4egw1f9xofkuv3uj207701p3yk.jpg" alt=""></p>
<p>console打印</p>
<p><img src="https://ws2.sinaimg.cn/large/83900b4egw1f9xofmbzj1j206m04qjrm.jpg" alt=""></p>
<p>先打印一次<code>AfterContentChecked</code>和<code>AfterViewChecked</code>，一秒后又打印两次。<code>OnChanges</code>没有触发。</p>
<h2 id="结论和收获"><a href="#结论和收获" class="headerlink" title="结论和收获"></a>结论和收获</h2><ol>
<li><code>TemplateRef</code>, <code>ViewContainerRef</code>这两个服务可以帮助我们实现结构指令的编写</li>
<li>结构指令可以完全注销组件，节约性能消耗</li>
<li>组件实例化，只需要触发一轮初始化和”变化检查”</li>
<li>angualr的启动会触发多次”变化检查”</li>
<li>我们可以继承<code>OnChanges</code>接口，来实现类似ng1中的<code>$watch</code>功能，获取变化前后的值，但是只能监视<code>@input</code>装饰的变量</li>
<li>ng2使用<code>zone</code>，将window对象上常见的异步方法（setTimeout等），都打上了”猴子补丁”，使其可以直接更新视图，我们再也不用在异步中写ng1中的<code>$apply</code>了</li>
<li>我们可以使用<code>setTimeout(()=&gt;{},0)</code>，在浏览器的一轮”event loop”后来触发ng2的”变化检查”</li>
<li>我们触发类的成员函数（<code>doSomething</code>）时，也会导致ng2的”变化检查”</li>
</ol>
<hr>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/angular2-tutorial" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我们要讲的是structural directives和组件生命周期这两个知识点。structural directives顾名思义就是改变dom结构的指令。著名的内建结构指令有&lt;a href=&quot;https://angular.io/docs/ts/latest/guide/template-syntax.html#ngIf&quot;&gt;ngIf&lt;/a&gt;,&lt;a href=&quot;https://angular.io/docs/ts/latest/guide/template-syntax.html#ngSwitch&quot;&gt;ngSwitch&lt;/a&gt; 和&lt;a href=&quot;https://angular.io/docs/ts/latest/guide/template-syntax.html#ngFor&quot;&gt;ngFor&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="https://lewis617.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Angular2系列教程（四）Attribute directives</title>
    <link href="https://lewis617.github.io/2016/02/17/ng2-attribute-directive/"/>
    <id>https://lewis617.github.io/2016/02/17/ng2-attribute-directive/</id>
    <published>2016-02-17T19:05:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们要讲的是ng2的Attribute directives。顾名思义，就是拓展dom属性的指令。这算是指令的第二课了，因为上节课的components实质也是指令。</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://ws1.sinaimg.cn/large/83900b4egw1f9xosknpxcj206d05odg4.jpg" alt=""></p>
<p>这个例子共两个指令，第一个是redify指令，能使元素的color属性变红。另外一个直接复制官网的highlight指令，但是我自己做了很多变化，来讲解写法的多样化。</p>
<p><a href="https://github.com/lewis617/angular2-tutorial/tree/gh-pages/directives" target="_blank" rel="external">源代码</a></p>
<h2 id="Directive"><a href="#Directive" class="headerlink" title="@Directive"></a>@Directive</h2><p>写指令，你需要从<code>&#39;angular2/core&#39;</code>中导入<code>Directive</code>，然后使用<code>@Directive</code>装饰器去装饰一个类：</p>
<p>app/directives.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Directive, ElementRef, Renderer&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"></div><div class="line">@Directive(&#123;</div><div class="line">  selector: <span class="string">'[redify]'</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> Redify &#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(private _element: ElementRef, private renderer: Renderer) &#123;</div><div class="line">      renderer.setElementStyle(_element.nativeElement, <span class="string">'color'</span>, <span class="string">'red'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码做了这些事：</p>
<ol>
<li>在装饰器<code>@Directive</code>中定义选择器<code>redify</code></li>
<li>在类<code>Redify</code>中的构造函数里面注入<code>ElementRef</code>，来获取当前的dom元素</li>
<li>同样注入<code>Renderer</code>服务来操作dom，使其<code>color</code>属性为红色</li>
</ol>
<p>服务是可以注入指令的。<code>Renderer</code>服务提供了多种操作dom样式的方法。</p>
<p><a href="https://angular.io/docs/ts/latest/api/core/ElementRef-class.html" target="_blank" rel="external">Official docs for ElementRef</a></p>
<p><a href="https://angular.io/docs/ts/latest/api/core/Renderer-class.html" target="_blank" rel="external">Official docs for Renderer</a></p>
<h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>如何实现指令的事件监听呢？答案是设置<code>host</code>：</p>
<p>src/app/highlight.directive.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">host: &#123;</div><div class="line">  <span class="string">'(mouseenter)'</span>: <span class="string">'onMouseEnter()'</span>,</div><div class="line">  <span class="string">'(mouseleave)'</span>: <span class="string">'onMouseLeave()'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在<code>@Directive</code>中设置<code>host</code>元数据，<code>host</code>是个对象，你可以通过<code>host</code>配置指令的事件监听，当事件发生，将触发相应的成员函数。本例子中，设置了鼠标进入和离开两个鼠标事件。并在类中编写相应的成员函数：</p>
<p>src/app/highlight.directive.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">onMouseEnter() &#123; <span class="keyword">this</span>._highlight(<span class="keyword">this</span>.highlightColor || <span class="keyword">this</span>._defaultColor); &#125;</div><div class="line">onMouseLeave() &#123; <span class="keyword">this</span>._highlight(<span class="literal">null</span>); &#125;</div></pre></td></tr></table></figure>
<h2 id="Input"><a href="#Input" class="headerlink" title="@Input"></a>@Input</h2><p>如果需要向指令中输入什么，那么需要<code>@input</code>这个装饰器，从<code>&#39;angular2/core&#39;</code>中导入<code>Input</code>即可使用：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Input(<span class="string">'myHighlight'</span>) highlightColor: <span class="built_in">string</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> _defaultColor = <span class="string">'red'</span>;</div><div class="line">@Input() <span class="keyword">set</span> defaultColor(colorName:<span class="built_in">string</span>)&#123;</div><div class="line">  <span class="keyword">this</span>._defaultColor = colorName || <span class="keyword">this</span>._defaultColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码我们做了几件事：</p>
<ol>
<li>给成员变量<code>highlightColor</code>，装饰一个<code>@Input(&#39;myHighlight&#39;)</code>，使其等于从<code>myHighlight</code>输入的属性</li>
<li>设置一个私有成员变量<code>_defaultColor</code></li>
<li><p><code>defaultColor</code>属性有个<code>setter</code>，可以重写<code>_defaultColor</code>变量，使<code>_defaultColor</code>等于从<code>defaultColor</code>属性输入的值或者其本身默认值</p>
<p>这都什么鬼？没有接触过装饰器的同学可能觉得不舒服。这是es7里面的语法糖，python里面也有，是一种函数式编程。装饰器实质是个函数，可以多个嵌套装饰。</p>
</li>
</ol>
<p>指令的<code>@Input</code>装饰器，有两种写法：</p>
<p>一就是给成员变量加个装饰器：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Input(<span class="string">'myHighlight'</span>) </div><div class="line">highlightColor: <span class="built_in">string</span>;</div></pre></td></tr></table></figure>
<p>代表从<code>myHighlight</code>属性输入的值会赋给成员变量<code>highlightColor</code>。</p>
<p>二就是使用<code>set</code>，编写一个函数，重写相关的成员变量，不明白<code>get</code> 和<code>set</code> 用法的同学可以参考这个：</p>
<ul>
<li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/get" target="_blank" rel="external">getters</a></li>
<li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/set" target="_blank" rel="external">setters</a></li>
</ul>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> _defaultColor = <span class="string">'red'</span>;</div><div class="line">@Input() <span class="keyword">set</span> defaultColor(colorName:<span class="built_in">string</span>)&#123;</div><div class="line">  <span class="keyword">this</span>._defaultColor = colorName || <span class="keyword">this</span>._defaultColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们来两个替换一下把：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> highlightColor:<span class="built_in">string</span>;</div><div class="line">@Input() <span class="keyword">set</span> myHighlight(colorName:<span class="built_in">string</span>)&#123;</div><div class="line">  <span class="keyword">this</span>.highlightColor=colorName</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Input(<span class="string">'defaultColor'</span>)</div><div class="line"><span class="keyword">private</span> _defaultColor = <span class="string">'red'</span>;</div></pre></td></tr></table></figure>
<p>仍然可以运行！</p>
<h2 id="使用指令"><a href="#使用指令" class="headerlink" title="使用指令"></a>使用指令</h2><p>导入指令的类，然后注入组件的<code>directives</code>中<code>[Redify,HighlightDirective]</code>，就可以在模板中使用指令了，这跟组件嵌套是一样的。</p>
<p>app/app.ts</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">import &#123;Component&#125; from 'angular2/core';</div><div class="line">import &#123;bootstrap&#125; from 'angular2/platform/browser';</div><div class="line">import &#123;Redify&#125; from './directives';</div><div class="line">import &#123;HighlightDirective&#125; from './highlight.directive';</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">    selector: "app",</div><div class="line">    directives:[Redify,HighlightDirective],</div><div class="line">    template: `</div><div class="line">    redify:</div><div class="line">      &lt;p redify &gt;hello,lewis&lt;/p&gt;</div><div class="line">     myHighlight:</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;input type="radio" name="colors" (click)="color='lightgreen'"&gt;Green</div><div class="line">          &lt;input type="radio" name="colors" (click)="color='yellow'"&gt;Yellow</div><div class="line">          &lt;input type="radio" name="colors" (click)="color='cyan'"&gt;Cyan</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;p [myHighlight]="color"&gt;Highlight me!&lt;/p&gt;</div><div class="line">      &lt;p [myHighlight]="color" [defaultColor]="'violet'"&gt;Highlight me too!&lt;/p&gt;</div><div class="line">    `</div><div class="line">&#125;)</div><div class="line">export class App &#123;</div><div class="line">    constructor() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bootstrap(App, [])</div><div class="line">    .catch(err =&gt; console.error(err));</div><div class="line">    </div><div class="line">```                    </div><div class="line"></div><div class="line">我们可以看到`&lt;p redify &gt;hello,lewis&lt;/p&gt;`，`redify`指令就是元素的一个属性而已。</div><div class="line"></div><div class="line">而`highlight`则使用了`[]`</div><div class="line"></div><div class="line">```ts</div><div class="line">&lt;p [myHighlight]="color"&gt;Highlight me!&lt;/p&gt;</div><div class="line">&lt;p [myHighlight]="color" [defaultColor]="'violet'"&gt;Highlight me too!&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>我们在模板语法里面讲过，[]是单向属性绑定的语法，里面可以是任何hmtl5属性，当然也可以是我们拓展的html属性，即指令。毕竟angular仍然是”旨在拓展html能力”。</p>
<p><code>[myHighlight]=&quot;color&quot;</code>将成员变量<code>color</code>绑定在<code>myHighlight</code>属性中，<code>[defaultColor]=&quot;&#39;violet&#39;&quot;</code>给<code>defaultColor</code>设置了<code>&#39;violet&#39;</code>的值。</p>
<hr>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/angular2-tutorial" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们要讲的是ng2的Attribute directives。顾名思义，就是拓展dom属性的指令。这算是指令的第二课了，因为上节课的components实质也是指令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="https://lewis617.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Angular2系列教程（三）Components</title>
    <link href="https://lewis617.github.io/2016/02/16/ng2-component/"/>
    <id>https://lewis617.github.io/2016/02/16/ng2-component/</id>
    <published>2016-02-16T22:28:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我们要讲的是ng2的Components。</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://ws4.sinaimg.cn/large/83900b4egw1f9xp4nip4hj20d703gt96.jpg" alt=""></p>
<p>这个例子是个老外写的，我将其迁移到ng2 beta版本，想了解迁移的同学可以参考我的做法。</p>
<p><a href="https://github.com/lewis617/angular2-tutorial/tree/gh-pages/componnets" target="_blank" rel="external">源代码</a></p>
<h2 id="消失的控制器"><a href="#消失的控制器" class="headerlink" title="消失的控制器"></a>消失的控制器</h2><p>ng2的组件就是ng1中的指令。它包含模板、样式、注入、和选择器。</p>
<p>组件嵌套组件可以实现类似react的模块化，我曾经也用ng1做过类似的事情</p>
<p><a href="https://lewis617.github.io/2015/10/01/ng-requirejs-module/">Angular 结合RequireJs实现模块化开发</a></p>
<p>我当时就想，既然有了指令（ng1）还要什么控制器（ng1）啊！果不其然ng2中移除了控制器，直接用指令也就是ng2的组件来展示界面：</p>
<p>app/navbar.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Component&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;NgFor&#125; from <span class="string">'angular2/common'</span></div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">    selector: <span class="string">"navbar"</span>,</div><div class="line">    directives: [NgFor],</div><div class="line">    styles: [<span class="string">`</span></div><div class="line">        li&#123;</div><div class="line">          color: gray;</div><div class="line">        &#125;</div><div class="line">    `],</div><div class="line">    template: <span class="string">`</span></div><div class="line">        &lt;h2&gt;Democratic Party presidential candidates&lt;/h2&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">        &lt;li *ngFor="#item of items; #i = index"&gt;&#123;&#123;item&#125;&#125; &#123;&#123;i&#125;&#125;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    `</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> Navbar &#123;</div><div class="line">    items: <span class="built_in">Array</span>&lt;<span class="built_in">String</span>&gt;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">      <span class="keyword">this</span>.items = [</div><div class="line">        <span class="string">"Hillary Clinton"</span>,</div><div class="line">        <span class="string">"Martin O'Malley"</span>,</div><div class="line">        <span class="string">"Bernie Sanders"</span></div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ngOnInit() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'[Component] navbar onInit'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当组件被实例化后，ng2为这个组件创建了一个shadow DOM（Shadow DOM在一个web组件中提供了js,css,template的封装），然后模板和样式被注入进去。</p>
<p>这段代码做了这些事情：</p>
<ol>
<li>设置选择器</li>
<li>设置<code>directives</code>为<code>[ngFor]</code></li>
<li>设置样式</li>
<li>设置模板</li>
<li>填写类的成员变量<code>items</code></li>
<li>在构造函数中给<code>items</code>添加数据</li>
<li>在生命周期的钩子<code>ngOnInit</code>中打印信息</li>
</ol>
<p>我们的组件就写好了。</p>
<h2 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h2><p>写好组件后，我们如何将这个组件放在<code>app</code>组件中呢？答案是<code>directives</code>。这里设计得没有react好，react的组件是可以直接用的，ng2的组件则需要以指令的身份注入，因为组件实质也是指令：</p>
<p>app/app.ts</p>
<pre><code class="ts"><span class="keyword">import</span> {Component} from <span class="string">'angular2/core'</span>;
<span class="keyword">import</span> {bootstrap} from <span class="string">'angular2/platform/browser'</span>;
<span class="keyword">import</span> {Navbar} from <span class="string">'./navbar'</span>;

@Component({
    selector: <span class="string">"app"</span>,
    directives:[Navbar],
    template: <span class="string">`
      &lt;navbar&gt;&lt;/navbar&gt;
    `</span>
})
<span class="keyword">export</span> <span class="keyword">class</span> App {
  <span class="keyword">constructor</span>() {

  }
}

bootstrap(App, [])
  .catch(err =&gt; <span class="built_in">console</span>.error(err));
</code></pre>
<p>ng2中组件和指令都是注入在<code>directives</code>中，<code>directives</code>包含三种类型：</p>
<ol>
<li>Components</li>
<li>Structural directives</li>
<li>Attribute directives</li>
</ol>
<p>关于指令，我们会单独拿出来讲解。</p>
<h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><p>本例中，我们使用了<code>ngOnInit</code>这个类方法去打印一个信息，这个方法会在组件初始化时候调用。组件存在很多声明周期钩子函数</p>
<ul>
<li><p><code>ngOnChanges</code>   </p>
</li>
<li><p><code>ngOnInit</code>   </p>
</li>
<li><p><code>ngOnDestroy</code>   </p>
</li>
<li><p><code>ngDoCheck</code></p>
</li>
<li><code>ngAfterContentInit</code></li>
<li><code>ngAfterContentChecked</code></li>
<li><code>ngAfterViewInit</code></li>
<li><code>ngAfterViewChecked</code></li>
</ul>
<p><a href="https://angular.io/docs/ts/latest/api/lifecycle_hooks/OnChanges-interface.html" target="_blank" rel="external">Official docs</a></p>
<hr>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/angular2-tutorial" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我们要讲的是ng2的Components。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="https://lewis617.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Angular2系列教程（二）模板语法</title>
    <link href="https://lewis617.github.io/2016/02/15/ng2-temlate/"/>
    <id>https://lewis617.github.io/2016/02/15/ng2-temlate/</id>
    <published>2016-02-15T23:40:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们要讲的是ng2的模板语法，<a href="https://angular.io/docs/ts/latest/guide/template-syntax.html" target="_blank" rel="external">官网</a>写的很清楚，但我也用通俗易懂的讲法再罗列一下吧！</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://ws2.sinaimg.cn/large/83900b4egw1f9xp9afp7tj20dr0gd754.jpg" alt=""></p>
<p><a href="https://github.com/lewis617/angular2-tutorial/tree/gh-pages/template-syntax" target="_blank" rel="external">源代码</a></p>
<h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><p>不需要特别的指令，只需要用<code>[value]</code>就可以了，并不只有<code>value</code>，<code>[]</code>里面可以是任何常用的html元素的属性！</p>
<p>app/app.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> [<span class="attr">value</span>]=<span class="string">"firstName"</span> [<span class="attr">placeholder</span>]=<span class="string">"firstNamePlaceholder"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>也可以用双花括号：</p>
<p>app/app.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;firstName&#125;&#125;"</span> <span class="attr">placeholder</span>=<span class="string">"&#123;&#123;firstNamePlaceholder&#125;&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>绑定的属性从何而来？从我们定义的类中：</p>
<p>app/app.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firstName: <span class="built_in">string</span> = <span class="string">'lewis'</span>;</div></pre></td></tr></table></figure>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>你可以在ng2中监听任何html5原生的元素事件，只需要使用这个语法： <code>(eventName)</code></p>
<p>app/app.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"doSomething($event)"</span> &gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>doSomething</code>从何而来？跟属性<code>firstName</code>一样，在类中定义：</p>
<p>app/app.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">doSomething($event)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'点击了这个按钮：'</span>,$event.target);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><p>刚才讲的是单向数据绑定，不信你可以改变input的值看看，别的绑定会不会变动。答案是不会！这次我们来做双向数据绑定：</p>
<p>app/app.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [<span class="attr">value</span>]=<span class="string">"firstName (input)="</span><span class="attr">firstName</span>=<span class="string">$event.target.value</span>" /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"firstName"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>使用单向绑定加事绑定可以，使用<code>[(ngModel)]</code>也可以！这样你再改变<code>input</code>的值，所有绑定<code>firstName</code>的值都会跟着变化！</p>
<p>ng2的双向数据绑定没有用”脏检查”，而是用了zone.js。这是个什么库呢？</p>
<blockquote>
<p>A zone is an execution context that persists across async tasks.</p>
</blockquote>
<p>用来维持切换上下文的库。用来替代<code>$apply()</code>的一个库。告诉你何时更新视图！</p>
<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>局部变量 <code>#</code> 是一个对象或者dom元素的指针，什么意思？看代码：</p>
<p>app/app.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- phone refers to the input element; pass its `value` to an event handler --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">phone</span> <span class="attr">placeholder</span>=<span class="string">"phone number"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"callPhone(phone.value)"</span>&gt;</span>Call<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- fax refers to the input element; pass its `value` to an event handler --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">var-fax</span> <span class="attr">placeholder</span>=<span class="string">"fax number"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"callFax(fax.value)"</span>&gt;</span>Fax<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p>一切尽在不言中！</p>
<h2 id="语法与template标签"><a href="#语法与template标签" class="headerlink" title="*语法与template标签"></a>*语法与template标签</h2><p>先看一个*语法与template标签的应用：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">"isActive"</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>相当于</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> [<span class="attr">ngIf</span>]=<span class="string">"isActive"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这段代码的意思是，如果<code>isActive</code>为<code>true</code>则渲染<code>p</code>元素。</p>
<p><code>template</code>标签声明了一段 DOM ，这段DOM在runtime后会被实例化。</p>
<p>使用<code>template</code>我们可以将一段DOM包裹起来，声明它，然后决定要不要渲染他们。不渲染的话，里面的元素就不会加载，可以节省运算。如果你用<code>div</code>和隐藏效果的话，里面的元素还得加载，浪费了运算。</p>
<p>我们也使用<code>*</code>语法替代<code>template</code>标签。起到同样的作用。</p>
<p>用<code>*</code>装饰的自带指令还有：<code>NgFor</code>, <code>NgIf</code>和<code>NgSwitch</code>。都是控制是否渲染的指令。我们用<code>*</code>来装饰后，就可以产生类似<code>template</code>的效果！</p>
<h2 id="更多语法"><a href="#更多语法" class="headerlink" title="更多语法"></a>更多语法</h2><p>以上只是介绍了常用的语法，还有更多的语法参考可以直接去<a href="https://angular.io/docs/ts/latest/guide/template-syntax.html" target="_blank" rel="external">官网</a></p>
<hr>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/angular2-tutorial" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们要讲的是ng2的模板语法，&lt;a href=&quot;https://angular.io/docs/ts/latest/guide/template-syntax.html&quot;&gt;官网&lt;/a&gt;写的很清楚，但我也用通俗易懂的讲法再罗列一下吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="https://lewis617.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Angular2系列教程（一）hello world</title>
    <link href="https://lewis617.github.io/2016/02/15/ng2-hello/"/>
    <id>https://lewis617.github.io/2016/02/15/ng2-hello/</id>
    <published>2016-02-15T01:38:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们要讲的是Angular2系列教程的第一篇，主要是学习Angular2的运行，以及感受Angular2的Components以及模板语法。</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://ws3.sinaimg.cn/large/83900b4egw1f9xppvhc43j208g052t92.jpg" alt=""></p>
<p>这个例子非常简单，是个双向数据绑定。我使用了官网上最简单的方法来启动这个程序，并且去除 CDN 使用本地加载，保证长期可以运行（因为文件都在本地，我们不用担心版本更新的问题。）</p>
<p><a href="https://github.com/lewis617/angular2-tutorial/tree/gh-pages/hellowold" target="_blank" rel="external">源代码</a></p>
<p>运行方法：</p>
<p>全局安装http-server</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g http-server</div></pre></td></tr></table></figure>
<p>在根目录（hellowold）运行服务</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http-server</div></pre></td></tr></table></figure>
<p>根据提示打开相应的端口（一般是8080）。</p>
<p>也可以直接看我的<a href="http://lewis617.github.io/angular2-tutorial/hellowold/">github pages</a> 。</p>
<h2 id="公共部分"><a href="#公共部分" class="headerlink" title="公共部分"></a>公共部分</h2><p>公共部分就是你可以直接复制粘贴拿去用的部分，包括</p>
<ol>
<li>index.html</li>
<li>lib（文件夹以及里面所有的js文件）</li>
<li>app/main.ts</li>
</ol>
<p>这些文件都是完全不用修改的，还有一个文件需要部分修改：</p>
<ol>
<li>app/app.ts</li>
</ol>
<p>这个文件必须导出App组件。其他文件都是需要自己编写的。</p>
<h2 id="lib简介"><a href="#lib简介" class="headerlink" title="lib简介"></a>lib简介</h2><ol>
<li><p>前三个文件是ie的polyfill，其他浏览器是不需要的</p>
<ul>
<li><code>&lt;script src=&quot;lib/es6-shim.min.js&quot;&gt;&lt;/script&gt;</code> </li>
<li><code>&lt;script src=&quot;lib/system-polyfills.js&quot;&gt;&lt;/script&gt;</code> </li>
<li><code>&lt;script src=&quot;lib/shims_for_IE.js&quot;&gt;&lt;/script&gt;</code>  </li>
</ul>
</li>
<li><p>第四个文件包含了zone和reflect-metadata。zone告诉angular2何时更新视图？还记的ng1的脏检查以及$apply吧，zone就是用来取代这些恶心的东西的！reflect-metadata也是为了使用 ES7风格的装饰器准备的，就像<code>@Component</code> 和 <code>@View</code> 。这在ng2里面重度使用！</p>
<ul>
<li><code>&lt;script src=&quot;lib/angular2-polyfills.js&quot;&gt;&lt;/script&gt;</code></li>
</ul>
</li>
<li><p>这三个文件分别用于模块系统、ts编译、响应式编程（增强处理异步的能力）</p>
<ul>
<li><code>&lt;script src=&quot;lib/system.js&quot;&gt;&lt;/script&gt;</code>  </li>
<li><code>&lt;script src=&quot;lib/typescript.js&quot;&gt;&lt;/script&gt;</code>  </li>
<li><code>&lt;script src=&quot;lib/Rx.js&quot;&gt;&lt;/script&gt;</code>   </li>
</ul>
</li>
<li><p>最后是ng2的库文件</p>
<ul>
<li><code>&lt;script src=&quot;lib/angular2.dev.js&quot;&gt;&lt;/script&gt;</code></li>
</ul>
</li>
</ol>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>其实这个程序就一个ts文件，还特别短！</p>
<p>app/app.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'angular2/core'</span>;  </div><div class="line">  </div><div class="line">@Component(&#123;  </div><div class="line">    selector: <span class="string">'app'</span>,  </div><div class="line">    template: <span class="string">`  </span></div><div class="line">        &lt;h1&gt;Hello, &#123;&#123;name&#125;&#125;!&lt;/h1&gt;  </div><div class="line">        Say hello to: &lt;input [value]="name" (input)="name = $event.target.value"&gt;  </div><div class="line">    `  </div><div class="line">&#125;)  </div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;  </div><div class="line">    name: <span class="built_in">string</span> = <span class="string">'World'</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个类，给它装饰一个组件，组件是什么？就是ng1里面的指令，react中的组件，就是样子，看得见摸得着的东西。</p>
<p>这里我不得不夸一下ng2，实在改进太多了，所有的东西包括组件、服务、过滤器等都是一个类，然后用各自相关的@装饰器，装饰一下就可以了，非常简单明了！</p>
<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>我们先来感受下ng2的模板语法，后面我会单独拿出来讲这个知识点。</p>
<p>值得高兴的是双花括号依然存在</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>ng-model</code>变成了<code>[value]</code>，属性绑定用了<code>[value]</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> [<span class="attr">value</span>]=<span class="string">"name"</span> (<span class="attr">input</span>)=<span class="string">"name = $event.target.value"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>事件绑定变成了<code>()</code>，里面是所有html5的事件比如，<code>click</code>,<code>hover</code>,<code>input</code>等等。ng2终于拥抱html5原生方法了！</p>
<hr>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/angular2-tutorial" target="_blank" rel="external">https://github.com/lewis617/angular2-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们要讲的是Angular2系列教程的第一篇，主要是学习Angular2的运行，以及感受Angular2的Components以及模板语法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="https://lewis617.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>自定义 Jinja2 过滤器</title>
    <link href="https://lewis617.github.io/2016/02/06/custom-jinja2-filter/"/>
    <id>https://lewis617.github.io/2016/02/06/custom-jinja2-filter/</id>
    <published>2016-02-06T19:31:00.000Z</published>
    <updated>2016-12-19T12:59:38.803Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我们要讲的是自定义Jinja2 过滤器这个知识点，因为官方文档对此一代而过，讲得不够清楚，所以我们专门拿出来讲一下。</p>
<a id="more"></a>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>例子写了两个自定义过滤器，一个是转换字典到字符串的过滤器，一个是返回当前参数的类型的过滤器。</p>
<p>源代码：</p>
<p><a href="https://github.com/lewis617/myflask/tree/master/jinja2-filter" target="_blank" rel="external">https://github.com/lewis617/myflask/tree/master/jinja2-filter</a></p>
<h1 id="过滤器是个函数"><a href="#过滤器是个函数" class="headerlink" title="过滤器是个函数"></a>过滤器是个函数</h1><p>过滤器是个函数，跟Angular的过滤器几乎一模一样。参数就是管道（pipe）前面那个变量。比如   <code>123|myfilter</code>，<code>123</code>就是<code>myFilter</code>的参数。如果需要两个参数，则在<code>myFilter</code>后面加<code>（）</code>，即<code>123|myFilter(234)</code>。</p>
<h1 id="过滤器函数写在哪"><a href="#过滤器函数写在哪" class="headerlink" title="过滤器函数写在哪"></a>过滤器函数写在哪</h1><p>这是这个是编写过滤器的关键。过滤器函数写在<code>app.run</code>前，注册在<code>app.jinja_env.filters</code>中，这是什么意思？看代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">app = Flask(__name__) <span class="comment"># custom filter # convert dict to string</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_dumps</span><span class="params">(dict)</span>:</span></div><div class="line">        result = json.dumps(dict) <span class="keyword">return</span> result <span class="comment"># return type of arg</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">typeFilter</span><span class="params">(arg)</span>:</span></div><div class="line">        result = type(arg) <span class="keyword">return</span> result</div><div class="line"></div><div class="line">env = app.jinja_env</div><div class="line">env.filters[<span class="string">'json_dumps'</span>] = json_dumps</div><div class="line">env.filters[<span class="string">'typeFilter'</span>] = typeFilter</div></pre></td></tr></table></figure>
<ol>
<li>实例化一个Flask对象<code>app</code></li>
<li>编写两个函数</li>
<li>将函数挂在<code>app.jinja_env.filters</code>上</li>
</ol>
<p>就是这么简单！</p>
<h1 id="测试示例代码"><a href="#测试示例代码" class="headerlink" title="测试示例代码"></a>测试示例代码</h1><p>第一个过滤器转换字典到字符串，第二个返回当前参数的类型</p>
<p>我们在index.html中编写：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line">dict is &#123;&#123; dict|typeFilter&#125;&#125; <span class="tag">&lt;<span class="name">hr</span>&gt;</span> </div><div class="line">dict | json_dumps is&#123;&#123; dict|json_dumps |typeFilter&#125;&#125; <span class="tag">&lt;<span class="name">hr</span>&gt;</span> </div><div class="line">you can use json_dumps filter to send dict to js,remember to add safe filter,<span class="tag">&lt;<span class="name">br</span>&gt;</span> press f12 to test it </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">    //you can use json_dumps filter to send dict to js,remember to add safe filter</div><div class="line"> console.log(&#123;&#123; dict |json_dumps|safe&#125;&#125;) </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在app.py中渲染这个html</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></div><div class="line">    dict=&#123;<span class="string">'name'</span>:<span class="string">'lewis'</span>,<span class="string">'age'</span>:<span class="number">24</span>&#125; <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,dict=dict) <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="https://ws1.sinaimg.cn/large/83900b4egw1f9yh3fdydqj20g408ojsr.jpg" alt=""></p>
<p><code>json_dumps</code>可以将dict转为字符串，这样我们用Jinja渲染的对象列表之类的就可以，以字符串的形式打印出来，便于我们在开发环境下监视渲染状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我们要讲的是自定义Jinja2 过滤器这个知识点，因为官方文档对此一代而过，讲得不够清楚，所以我们专门拿出来讲一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jinja2" scheme="https://lewis617.github.io/tags/Jinja2/"/>
    
      <category term="Flask" scheme="https://lewis617.github.io/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>React与Redux教程（八）连接数据库的Redux程序</title>
    <link href="https://lewis617.github.io/2016/02/03/r2-database/"/>
    <id>https://lewis617.github.io/2016/02/03/r2-database/</id>
    <published>2016-02-03T01:00:00.000Z</published>
    <updated>2016-12-19T12:59:38.807Z</updated>
    
    <content type="html"><![CDATA[<p>前面所有的教程都是解读官方的示例代码，是时候我们自己写个连接数据库的Redux程序了！</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://ws2.sinaimg.cn/large/83900b4egw1f9xqsagq6bg20q50ksjwp.gif" alt=""></p>
<p>这个例子代码，是我自己写的程序，一个非常简单的todo，但是包含了Redux插件的用法，中间件的用法，连接数据库的方法等多个知识点。</p>
<p>源代码：</p>
<p><a href="https://github.com/lewis617/react-redux-tutorial/tree/master/redux-wilddog-todos" target="_blank" rel="external">https://github.com/lewis617/react-redux-tutorial/tree/master/redux-wilddog-todos</a></p>
<p>运行方法：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install</div><div class="line"></div><div class="line">npm run build</div></pre></td></tr></table></figure>
<p>手动打开index.html</p>
<h2 id="Wilddog数据库"><a href="#Wilddog数据库" class="headerlink" title="Wilddog数据库"></a>Wilddog数据库</h2><p>作为一名曾经的Angular开发者，我非常喜欢用Firebase来做自己的数据库，并结合Angular实现酷炫的”三向数据绑定”。Wilddog是中国的”Firebase”，不仅语法兼容，而且国内速度更快。</p>
<p>下面的程序都是基于Wilddog和Angular的程序，也用了我曾经的最爱Requirejs，有兴趣的同学可以看看，顺便给我点star哈哈！</p>
<p><a href="https://github.com/lewis617/wild-angular-seed" target="_blank" rel="external">https://github.com/lewis617/wild-angular-seed</a></p>
<p><a href="https://github.com/lewis617/daily-task" target="_blank" rel="external">https://github.com/lewis617/daily-task</a></p>
<p>如今写React程序，仍然可以使用Wilddog或者Firebase，不仅不用配置数据库服务，也不用写数据库增删改查的API程序了，可以让我们前端工程师专注于写前端程序！</p>
<p><a href="https://www.wilddog.com/" target="_blank" rel="external">https://www.wilddog.com/</a></p>
<h2 id="Redux的Chrome插件"><a href="#Redux的Chrome插件" class="headerlink" title="Redux的Chrome插件"></a>Redux的Chrome插件</h2><p>本程序也用到了Redux的chrome插件，可以帮助我们自动生成Redux的devtool界面，非常好用啊！只需要在你的程序store注册中，加入一行代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (initialState) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> store = compose(</div><div class="line">      applyMiddleware(</div><div class="line">          thunk,</div><div class="line">          createLogger()</div><div class="line">      ),</div><div class="line">      <span class="built_in">window</span>.devToolsExtension ? <span class="built_in">window</span>.devToolsExtension() : <span class="function"><span class="params">f</span> =&gt;</span> f</div><div class="line">  )(createStore)(reducers, initialState);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> store;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>就是这行代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.devToolsExtension ? <span class="built_in">window</span>.devToolsExtension() : <span class="function"><span class="params">f</span> =&gt;</span> f</div></pre></td></tr></table></figure>
<p>安装方法，就是去chrome的市场搜索Redux关键字就可以了！</p>
<h2 id="没有服务端渲染和热替换"><a href="#没有服务端渲染和热替换" class="headerlink" title="没有服务端渲染和热替换"></a>没有服务端渲染和热替换</h2><p>为什么要把这个单独提起来说呢？这是一个历史遗留问题。我们研究所用的Web框架是Flask，一个Python框架，包括前端也是用Flask的Jinja模板。没有Node.js也就意味着无法使用服务端渲染和热替换这两个炫酷的功能。</p>
<p>那么不是基于Node.js的前端程序，还能否使用Redux和React呢？当然可以，我只通过Webpack生成一个js文件，将js文件放进html里面。其他所有的功能都不要。这也是可以的。这也算是结合非Node平台的一个实践经验吧！当然你的包管理还得用NPM。</p>
<p>从另一个方面来说，基于Node.js的前端时代已经来临，如果你拒绝它，将会失去很多，或者寸步难行！</p>
<h2 id="获取所有的todos"><a href="#获取所有的todos" class="headerlink" title="获取所有的todos"></a>获取所有的todos</h2><p>我们在action中进行http请求和服务端交互，即便是在中间件中执行http请求，其实质也是dispatch的封装。那么这个程序的关键就是action的编写。</p>
<p>实例化Wilddog，定义action类型:</p>
<p>actions.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Wilddog <span class="keyword">from</span> <span class="string">'wilddog/lib/wilddog-node'</span></div><div class="line"><span class="comment">/*</span></div><div class="line"> * action 类型</div><div class="line"> */</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET_TODO_ERROR = <span class="string">'GET_TODO_ERROR'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET_TODO_OK = <span class="string">'GET_TODO_OK'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TODO_ERROR = <span class="string">'ADD_TODO_ERROR'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TODO_OK = <span class="string">'ADD_TODO_OK'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> REMOVE_TODO_OK = <span class="string">'REMOVE_TODO_OK'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> REMOVE_TODO_ERROR = <span class="string">'REMOVE_TODO_ERROR'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> wilddog=<span class="keyword">new</span> Wilddog(<span class="string">'https://redux-wilddog-todos.wilddogio.com'</span>)</div></pre></td></tr></table></figure>
<p>从Wilddog数据库中获取所有的todos，因为Wilddog数据库是树状结构，生成的列表，其实质也是个对象，所以我们需要将其转化为数组：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">    </div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getTodo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch,getState</span>)=&gt;</span>&#123;</div><div class="line"></div><div class="line">    wilddog.child(<span class="string">'todos'</span>).once(<span class="string">'value'</span>,(snapshot)=&gt;&#123;</div><div class="line">      <span class="keyword">let</span> obj=snapshot.val();</div><div class="line">      <span class="keyword">let</span> array=[];</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</div><div class="line">        array.push(&#123;<span class="attr">key</span>:key,<span class="attr">text</span>:obj[key].text&#125;)</div><div class="line">      &#125;</div><div class="line">      dispatch(&#123;</div><div class="line">        <span class="attr">type</span>: GET_TODO_OK,</div><div class="line">        <span class="attr">payload</span>: array</div><div class="line">      &#125;)</div><div class="line">    &#125;,(err)=&gt;&#123;</div><div class="line">      dispatch(&#123;</div><div class="line">        <span class="attr">type</span>: GET_TODO_ERROR,</div><div class="line">        <span class="attr">payload</span>: err</div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>wilddog.child(&#39;todos&#39;).once(&#39;value&#39;,function)</code>是获取<code>&#39;todos&#39;</code>节点数据的方法。获取到数据后，转化为数组。然后dispatch一个<code>GET_TODO_OK</code>，告诉reducer获取数据成功，可以更新state了。数据都装在<code>payload</code>中。如果失败，则dispatch一<code>GET_TODO_ERROR</code>。</p>
<p>就是这么简单，不用写后台程序，在js中直接操作数据库！</p>
<p>那么在哪里执行这个getTodo呢？你可以在组件渲染后dispatch它，也可以在初始化store后，立即执行它。我用的是后面一种：</p>
<p>index.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; getTodo,registerListeners&#125; <span class="keyword">from</span> <span class="string">'./actions'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore();</div><div class="line"></div><div class="line">store.dispatch(getTodo())</div><div class="line"><span class="string">``</span><span class="string">`    </span></div><div class="line"></div><div class="line">## 添加新的todo</div><div class="line"></div><div class="line">在action中定义添加todo的方法：</div><div class="line"></div><div class="line">actions.js</div><div class="line"></div><div class="line">`<span class="string">``</span>js</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch,getState</span>)=&gt;</span>&#123;</div><div class="line"></div><div class="line">    wilddog.child(<span class="string">'todos'</span>).push(&#123;</div><div class="line">      text</div><div class="line">    &#125;,(err)=&gt;&#123;</div><div class="line">      <span class="keyword">if</span>(err)&#123;dispatch(&#123;<span class="attr">type</span>:ADD_TODO_ERROR,<span class="attr">payload</span>:err&#125;)&#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过<code>wilddog.child(&#39;todos&#39;).push()</code>方法，直接往数据库中插入数据，第二参数是回调，失败的话，dispatch相应的action。</p>
<p>那么成功后的action在哪执行？我们需要再写一个function，绑定数据变动的回调。其实正常情况下，我们在这个function中就直接写成功后的回调了，主要是因为Wilddog数据库的成功回调不在<code>push</code>这个方法中。</p>
<p>actions.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">registerListeners</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">    wilddog.child(<span class="string">'todos'</span>).on(<span class="string">'child_removed'</span>, snapshot =&gt; &#123;</div><div class="line">      dispatch(&#123;</div><div class="line">        <span class="attr">type</span>: REMOVE_TODO_OK,</div><div class="line">        <span class="attr">payload</span>: snapshot.key()</div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    wilddog.child(<span class="string">'todos'</span>).on(<span class="string">'child_added'</span>, snapshot =&gt; dispatch(&#123;</div><div class="line">      <span class="attr">type</span>: ADD_TODO_OK,</div><div class="line">      <span class="attr">payload</span>: <span class="built_in">Object</span>.assign(&#123;&#125;,snapshot.val(),&#123;<span class="attr">key</span>:snapshot.key()&#125;)</div><div class="line">    &#125;));</div><div class="line"></div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>wilddog.child(&#39;todos&#39;).on(&#39;child_added&#39;)</code>这个方法定义了添加todo成功后的回调，我们执行了一个<code>ADD_TODO_OK</code> 的action，并把新的todo对象放在<code>payload</code>中返回给reducer。</p>
<p>你也看到了，我们顺便把移除todo成功的回调也定义了。</p>
<p>我们在哪执行这个绑定函数呢？就在获取所有todos的后面吧！其实放在组件渲染完也可以！</p>
<p>index.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">store.dispatch(registerListeners())</div></pre></td></tr></table></figure>
<h2 id="移除指定todo"><a href="#移除指定todo" class="headerlink" title="移除指定todo"></a>移除指定todo</h2><p>在action中添加移除todo的方法：</p>
<p>actions.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removeTodo</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch,getState</span>)=&gt;</span>&#123;</div><div class="line"></div><div class="line">    wilddog.child(<span class="string">`todos/<span class="subst">$&#123;key&#125;</span>`</span>).remove(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</div><div class="line">      <span class="keyword">if</span>(err)dispatch(&#123;<span class="attr">type</span>:REMOVE_TODO_ERROR,<span class="attr">payload</span>:err&#125;)</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过Wilddog的<code>remove</code>方法移除数据库的指定节点。就是这么简单！然后编写失败后的回调以及action！</p>
<h2 id="数据库在action中完事，state还需要reducer"><a href="#数据库在action中完事，state还需要reducer" class="headerlink" title="数据库在action中完事，state还需要reducer"></a>数据库在action中完事，state还需要reducer</h2><p>数据库我们是操作完啦，不过组件的显示是基于state的，我们还要同步更新state，那么reducer就出场了！</p>
<p>reducers.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> &#123; ADD_TODO_OK, REMOVE_TODO_OK ,GET_TODO_OK&#125; <span class="keyword">from</span> <span class="string">'./actions'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state=[], action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> GET_TODO_OK:</div><div class="line">      <span class="keyword">return</span> action.payload</div><div class="line">    <span class="keyword">case</span> ADD_TODO_OK:</div><div class="line">      <span class="keyword">return</span> [</div><div class="line">        ...state,</div><div class="line">        action.payload</div><div class="line">      ]</div><div class="line">    <span class="keyword">case</span> REMOVE_TODO_OK:</div><div class="line">      <span class="keyword">return</span> state.filter(<span class="function">(<span class="params">todo</span>)=&gt;</span>todo.key!==action.payload</div><div class="line">      )</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> todoApp = combineReducers(&#123;</div><div class="line">  todos</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoApp</div></pre></td></tr></table></figure>
<p>很简单，如果你还不会，可以去前面几节教程补课。</p>
<p>来个图吧：</p>
<p><img src="https://ws1.sinaimg.cn/large/83900b4egw1f9xqsbmr1uj20bb055dgc.jpg" alt=""></p>
<p>action操作数据库后，要在回调中返回信号，让reducer更新state，因为只有state变了，组件才会变。state变了，组件自动就变了，至少不用苦逼地操作dom了，还是挺开心的！</p>
<h2 id="为什么不提React组件"><a href="#为什么不提React组件" class="headerlink" title="为什么不提React组件"></a>为什么不提React组件</h2><p>说了这么多我们的Redux容器算是搞定了，为什么不提组件？不是不提，是要让大家知道，组件和Redux容器的耦合度很低，我们可以完全将它们隔离开来编写，通过一些固定的套路将它们连接起来。什么套路？</p>
<ol>
<li>绑定state到props</li>
<li>绑定action到props（可选）</li>
<li>将store注入，并用provider在顶层包住组件</li>
</ol>
<p>Redux是个状态容器，只能通过发起action改变state，这种集中管控的做法让状态管理和预测变的简单。组件只是state的展现形式而已！React只是一个界面库而已！</p>
<hr>
<h2 id="教程源代码及目录"><a href="#教程源代码及目录" class="headerlink" title="教程源代码及目录"></a>教程源代码及目录</h2><p><a href="https://github.com/lewis617/react-redux-tutorial" target="_blank" rel="external">https://github.com/lewis617/react-redux-tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面所有的教程都是解读官方的示例代码，是时候我们自己写个连接数据库的Redux程序了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://lewis617.github.io/tags/React/"/>
    
      <category term="Redux" scheme="https://lewis617.github.io/tags/Redux/"/>
    
  </entry>
  
</feed>
